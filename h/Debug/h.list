
h.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08006248  08006248  00016248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006614  08006614  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800661c  0800661c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000001fc  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008ae8  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001784  00000000  00000000  00028d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d0  00000000  00000000  0002a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005f1  00000000  00000000  0002ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022134  00000000  00000000  0002b279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009603  00000000  00000000  0004d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d08c1  00000000  00000000  000569b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000310c  00000000  00000000  00127274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0012a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800622c 	.word	0x0800622c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800622c 	.word	0x0800622c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b090      	sub	sp, #64	; 0x40
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fb63 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f87b 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f95f 	bl	8001218 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f8e1 	bl	8001120 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f5e:	f000 f931 	bl	80011c4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_ADC_Start(&hadc1);
 8000f62:	4833      	ldr	r0, [pc, #204]	; (8001030 <main+0xe8>)
 8000f64:	f000 fc32 	bl	80017cc <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f6c:	4830      	ldr	r0, [pc, #192]	; (8001030 <main+0xe8>)
 8000f6e:	f000 fd32 	bl	80019d6 <HAL_ADC_PollForConversion>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d14d      	bne.n	8001014 <main+0xcc>
      {
          value = HAL_ADC_GetValue(&hadc1);
 8000f78:	482d      	ldr	r0, [pc, #180]	; (8001030 <main+0xe8>)
 8000f7a:	f000 fdb7 	bl	8001aec <HAL_ADC_GetValue>
 8000f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
          printf("ADC Value: %ld\r\n", value); // Add this line for debugging
 8000f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f82:	482c      	ldr	r0, [pc, #176]	; (8001034 <main+0xec>)
 8000f84:	f002 ffe2 	bl	8003f4c <iprintf>
          float temperature =(value * 3300.00 / 4096.00 / 10.00);
 8000f88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f8a:	f7ff fabb 	bl	8000504 <__aeabi_ui2d>
 8000f8e:	a326      	add	r3, pc, #152	; (adr r3, 8001028 <main+0xe0>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff fb30 	bl	80005f8 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <main+0xf0>)
 8000fa6:	f7ff fc51 	bl	800084c <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <main+0xf4>)
 8000fb8:	f7ff fc48 	bl	800084c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdf0 	bl	8000ba8 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
          sprintf(uartBuffer, "Temperature: %.2f C\r\n", temperature);
 8000fcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	1d38      	adds	r0, r7, #4
 8000fd8:	4919      	ldr	r1, [pc, #100]	; (8001040 <main+0xf8>)
 8000fda:	f002 ffc9 	bl	8003f70 <siprintf>
          if (HAL_UART_Transmit(&huart2,uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY) == HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f945 	bl	8000270 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	1d39      	adds	r1, r7, #4
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff0:	4814      	ldr	r0, [pc, #80]	; (8001044 <main+0xfc>)
 8000ff2:	f001 ff0e 	bl	8002e12 <HAL_UART_Transmit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d108      	bne.n	800100e <main+0xc6>
          {
              printf("Temperature: %f C\r\n", temperature); // Add this line for debugging
 8000ffc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ffe:	f7ff faa3 	bl	8000548 <__aeabi_f2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4810      	ldr	r0, [pc, #64]	; (8001048 <main+0x100>)
 8001008:	f002 ffa0 	bl	8003f4c <iprintf>
 800100c:	e004      	b.n	8001018 <main+0xd0>

          }
          else
          {
              Error_Handler(); // Handle UART transmission error
 800100e:	f000 f91d 	bl	800124c <Error_Handler>
 8001012:	e001      	b.n	8001018 <main+0xd0>
          }
      }
      else
      {
          Error_Handler(); // Handle ADC conversion error
 8001014:	f000 f91a 	bl	800124c <Error_Handler>
      }

      HAL_ADC_Stop(&hadc1);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <main+0xe8>)
 800101a:	f000 fca9 	bl	8001970 <HAL_ADC_Stop>
      HAL_Delay(2000);
 800101e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001022:	f000 fb6b 	bl	80016fc <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 8001026:	e79c      	b.n	8000f62 <main+0x1a>
 8001028:	00000000 	.word	0x00000000
 800102c:	40a9c800 	.word	0x40a9c800
 8001030:	200001f0 	.word	0x200001f0
 8001034:	08006248 	.word	0x08006248
 8001038:	40b00000 	.word	0x40b00000
 800103c:	40240000 	.word	0x40240000
 8001040:	0800625c 	.word	0x0800625c
 8001044:	20000238 	.word	0x20000238
 8001048:	08006274 	.word	0x08006274

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 ffeb 	bl	8004036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010bc:	2308      	movs	r3, #8
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80010c0:	2332      	movs	r3, #50	; 0x32
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c8:	2307      	movs	r3, #7
 80010ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 f9b9 	bl	8002448 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010dc:	f000 f8b6 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fc1a 	bl	8002938 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 f89f 	bl	800124c <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_ADC1_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_ADC1_Init+0xa0>)
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_ADC1_Init+0x98>)
 800116c:	2201      	movs	r2, #1
 800116e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC1_Init+0x98>)
 800117a:	2201      	movs	r2, #1
 800117c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001180:	f000 fae0 	bl	8001744 <HAL_ADC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 f85f 	bl	800124c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800118e:	2301      	movs	r3, #1
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_ADC1_Init+0x98>)
 80011a0:	f000 fcb2 	bl	8001b08 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011aa:	f000 f84f 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001f0 	.word	0x200001f0
 80011bc:	40012000 	.word	0x40012000
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_USART2_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011fc:	f001 fdbc 	bl	8002d78 <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f000 f821 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000238 	.word	0x20000238
 8001214:	40004400 	.word	0x40004400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_GPIO_Init+0x30>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <MX_GPIO_Init+0x30>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_GPIO_Init+0x30>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f000 ff06 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_ADC_MspInit+0x7c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d127      	bne.n	800131a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_ADC_MspInit+0x80>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <HAL_ADC_MspInit+0x80>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_ADC_MspInit+0x80>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_ADC_MspInit+0x80>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_ADC_MspInit+0x80>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <HAL_ADC_MspInit+0x80>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001302:	2307      	movs	r3, #7
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_ADC_MspInit+0x84>)
 8001316:	f000 fefb 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012000 	.word	0x40012000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x88>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139a:	2307      	movs	r3, #7
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_UART_MspInit+0x8c>)
 80013a6:	f000 feb3 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40004400 	.word	0x40004400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f956 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_kill>:

int _kill(int pid, int sig)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800142e:	f002 fe55 	bl	80040dc <__errno>
 8001432:	4603      	mov	r3, r0
 8001434:	2216      	movs	r2, #22
 8001436:	601a      	str	r2, [r3, #0]
  return -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_exit>:

void _exit (int status)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800144c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffe7 	bl	8001424 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001456:	e7fe      	b.n	8001456 <_exit+0x12>

08001458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e00a      	b.n	8001480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800146a:	f3af 8000 	nop.w
 800146e:	4601      	mov	r1, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf0      	blt.n	800146a <_read+0x12>
  }

  return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e009      	b.n	80014b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf1      	blt.n	80014a4 <_write+0x12>
  }
  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_close>:

int _close(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	605a      	str	r2, [r3, #4]
  return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_isatty>:

int _isatty(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f002 fdba 	bl	80040dc <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	2000027c 	.word	0x2000027c
 800159c:	200003d0 	.word	0x200003d0

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e0:	4c0b      	ldr	r4, [pc, #44]	; (8001610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ee:	f7ff ffd7 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f002 fd79 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fca7 	bl	8000f48 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001608:	08006624 	.word	0x08006624
  ldr r2, =_sbss
 800160c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001610:	200003d0 	.word	0x200003d0

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 fd31 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe04 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fd3b 	bl	80020f6 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001698:	f000 fd11 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000280 	.word	0x20000280

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000280 	.word	0x20000280

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e033      	b.n	80017c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fda0 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178a:	f023 0302 	bic.w	r3, r3, #2
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fad8 	bl	8001d4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
 80017b2:	e001      	b.n	80017b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Start+0x1a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e0b2      	b.n	800194c <HAL_ADC_Start+0x180>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d018      	beq.n	800182e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800180c:	4b52      	ldr	r3, [pc, #328]	; (8001958 <HAL_ADC_Start+0x18c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_ADC_Start+0x190>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9a      	lsrs	r2, r3, #18
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001820:	e002      	b.n	8001828 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d17a      	bne.n	8001932 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001866:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187a:	d106      	bne.n	800188a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f023 0206 	bic.w	r2, r3, #6
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44
 8001888:	e002      	b.n	8001890 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_ADC_Start+0x194>)
 800189a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d12a      	bne.n	8001908 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_ADC_Start+0x198>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d015      	beq.n	80018e8 <HAL_ADC_Start+0x11c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a29      	ldr	r2, [pc, #164]	; (8001968 <HAL_ADC_Start+0x19c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_Start+0x106>
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_ADC_Start+0x194>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a25      	ldr	r2, [pc, #148]	; (800196c <HAL_ADC_Start+0x1a0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d136      	bne.n	800194a <HAL_ADC_Start+0x17e>
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_ADC_Start+0x194>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d130      	bne.n	800194a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d129      	bne.n	800194a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	e020      	b.n	800194a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_ADC_Start+0x198>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d11b      	bne.n	800194a <HAL_ADC_Start+0x17e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d114      	bne.n	800194a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e00b      	b.n	800194a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	20000000 	.word	0x20000000
 800195c:	431bde83 	.word	0x431bde83
 8001960:	40012300 	.word	0x40012300
 8001964:	40012000 	.word	0x40012000
 8001968:	40012100 	.word	0x40012100
 800196c:	40012200 	.word	0x40012200

08001970 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Stop+0x16>
 8001982:	2302      	movs	r3, #2
 8001984:	e021      	b.n	80019ca <HAL_ADC_Stop+0x5a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d113      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a02:	d10b      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e063      	b.n	8001ae4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a1c:	f7ff fe62 	bl	80016e4 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a22:	e021      	b.n	8001a68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a2a:	d01d      	beq.n	8001a68 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_ADC_PollForConversion+0x6c>
 8001a32:	f7ff fe57 	bl	80016e4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d212      	bcs.n	8001a68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d00b      	beq.n	8001a68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e03d      	b.n	8001ae4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d1d6      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0212 	mvn.w	r2, #18
 8001a7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d123      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11f      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d111      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e105      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x228>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d925      	bls.n	8001b80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68d9      	ldr	r1, [r3, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	3b1e      	subs	r3, #30
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43da      	mvns	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	400a      	ands	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4403      	add	r3, r0
 8001b72:	3b1e      	subs	r3, #30
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	e022      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	2207      	movs	r2, #7
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4403      	add	r3, r0
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d824      	bhi.n	8001c18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b05      	subs	r3, #5
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b05      	subs	r3, #5
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
 8001c16:	e04c      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d824      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b23      	subs	r3, #35	; 0x23
 8001c32:	221f      	movs	r2, #31
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	400a      	ands	r2, r1
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b23      	subs	r3, #35	; 0x23
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
 8001c68:	e023      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b41      	subs	r3, #65	; 0x41
 8001c7c:	221f      	movs	r2, #31
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	400a      	ands	r2, r1
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b41      	subs	r3, #65	; 0x41
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_ADC_ConfigChannel+0x234>)
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <HAL_ADC_ConfigChannel+0x238>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d109      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1cc>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b12      	cmp	r3, #18
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_ADC_ConfigChannel+0x238>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d123      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x21e>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d003      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x1e6>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b11      	cmp	r3, #17
 8001cec:	d11b      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d111      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_ADC_ConfigChannel+0x23c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_ADC_ConfigChannel+0x240>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9a      	lsrs	r2, r3, #18
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40012300 	.word	0x40012300
 8001d40:	40012000 	.word	0x40012000
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <ADC_Init+0x1f0>)
 8001d56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	021a      	lsls	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <ADC_Init+0x1f4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e00f      	b.n	8001e4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0202 	bic.w	r2, r2, #2
 8001e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	005a      	lsls	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6859      	ldr	r1, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	035a      	lsls	r2, r3, #13
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	e007      	b.n	8001ec0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	051a      	lsls	r2, r3, #20
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6899      	ldr	r1, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f02:	025a      	lsls	r2, r3, #9
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	029a      	lsls	r2, r3, #10
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40012300 	.word	0x40012300
 8001f40:	0f000001 	.word	0x0f000001

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff47 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff5c 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffb0 	bl	8002064 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e16b      	b.n	8002404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 815a 	bne.w	80023fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d017      	beq.n	8002200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80b4 	beq.w	80023fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_GPIO_Init+0x30c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a5f      	ldr	r2, [pc, #380]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <HAL_GPIO_Init+0x310>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x314>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x226>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_GPIO_Init+0x318>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x222>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_GPIO_Init+0x31c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x21e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x320>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x21a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x324>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x216>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x328>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x212>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x32c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x330>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x20a>
 8002316:	2307      	movs	r3, #7
 8002318:	e00e      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800231a:	2308      	movs	r3, #8
 800231c:	e00c      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800231e:	2306      	movs	r3, #6
 8002320:	e00a      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002322:	2305      	movs	r3, #5
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002326:	2304      	movs	r3, #4
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002336:	2300      	movs	r3, #0
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002348:	4935      	ldr	r1, [pc, #212]	; (8002420 <HAL_GPIO_Init+0x310>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237a:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x334>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	f67f ae90 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40021400 	.word	0x40021400
 800243c:	40021800 	.word	0x40021800
 8002440:	40021c00 	.word	0x40021c00
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e267      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e242      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6f      	ldr	r2, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6c      	ldr	r2, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f8f0 	bl	80016e4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f8ec 	bl	80016e4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e207      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff f8dc 	bl	80016e4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f8d8 	bl	80016e4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1f3      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c7      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4937      	ldr	r1, [pc, #220]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x244>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7ff f891 	bl	80016e4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff f88d 	bl	80016e4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a8      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x244>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff f870 	bl	80016e4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff f86c 	bl	80016e4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e187      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x248>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7ff f850 	bl	80016e4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff f84c 	bl	80016e4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e167      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x248>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff f839 	bl	80016e4 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00e      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff f835 	bl	80016e4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d907      	bls.n	8002694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e150      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ea      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8097 	beq.w	80027dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b77      	ldr	r3, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b74      	ldr	r3, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a73      	ldr	r2, [pc, #460]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fff5 	bl	80016e4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe fff1 	bl	80016e4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e10c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ea>
 8002724:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x30c>
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002754:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a54      	ldr	r2, [pc, #336]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe ffb6 	bl	80016e4 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe ffb2 	bl	80016e4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0cb      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x334>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe ffa0 	bl	80016e4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe ff9c 	bl	80016e4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b5      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a1 	beq.w	8002928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d05c      	beq.n	80028ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d141      	bne.n	800287e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe ff70 	bl	80016e4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe ff6c 	bl	80016e4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e087      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	491b      	ldr	r1, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe ff45 	bl	80016e4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe ff41 	bl	80016e4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e05c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x416>
 800287c:	e054      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe ff2e 	bl	80016e4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe ff2a 	bl	80016e4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e045      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e038      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x4ec>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d121      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11a      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fe5c 	bl	80016e4 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe fe58 	bl	80016e4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fdbc 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08006288 	.word	0x08006288
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b094      	sub	sp, #80	; 0x50
 8002b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b10:	2300      	movs	r3, #0
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	2300      	movs	r3, #0
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	f200 80e1 	bhi.w	8002cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b36:	e0db      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b3c:	e0db      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3e:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b42:	e0d8      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b44:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
 8002b72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b76:	4622      	mov	r2, r4
 8002b78:	462b      	mov	r3, r5
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b88:	0150      	lsls	r0, r2, #5
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4621      	mov	r1, r4
 8002b90:	1a51      	subs	r1, r2, r1
 8002b92:	6139      	str	r1, [r7, #16]
 8002b94:	4629      	mov	r1, r5
 8002b96:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba8:	4659      	mov	r1, fp
 8002baa:	018b      	lsls	r3, r1, #6
 8002bac:	4651      	mov	r1, sl
 8002bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb2:	4651      	mov	r1, sl
 8002bb4:	018a      	lsls	r2, r1, #6
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	eb18 0303 	adds.w	r3, r8, r3
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	462b      	mov	r3, r5
 8002be4:	eb49 0303 	adc.w	r3, r9, r3
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	024b      	lsls	r3, r1, #9
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c00:	4621      	mov	r1, r4
 8002c02:	024a      	lsls	r2, r1, #9
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c14:	f7fe f818 	bl	8000c48 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	e058      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	0159      	lsls	r1, r3, #5
 8002c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c4e:	0150      	lsls	r0, r2, #5
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4641      	mov	r1, r8
 8002c56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c74:	ebb2 040a 	subs.w	r4, r2, sl
 8002c78:	eb63 050b 	sbc.w	r5, r3, fp
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	00eb      	lsls	r3, r5, #3
 8002c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8a:	00e2      	lsls	r2, r4, #3
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	4643      	mov	r3, r8
 8002c92:	18e3      	adds	r3, r4, r3
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	464b      	mov	r3, r9
 8002c98:	eb45 0303 	adc.w	r3, r5, r3
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002caa:	4629      	mov	r1, r5
 8002cac:	028b      	lsls	r3, r1, #10
 8002cae:	4621      	mov	r1, r4
 8002cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	028a      	lsls	r2, r1, #10
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	61fa      	str	r2, [r7, #28]
 8002cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc8:	f7fd ffbe 	bl	8000c48 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3750      	adds	r7, #80	; 0x50
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	08006298 	.word	0x08006298

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffdc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08006298 	.word	0x08006298

08002d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e03f      	b.n	8002e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe fac6 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f929 	bl	8003014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08a      	sub	sp, #40	; 0x28
 8002e16:	af02      	add	r7, sp, #8
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d17c      	bne.n	8002f2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_UART_Transmit+0x2c>
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e075      	b.n	8002f2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Transmit+0x3e>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e06e      	b.n	8002f2e <HAL_UART_Transmit+0x11c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2221      	movs	r2, #33	; 0x21
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e66:	f7fe fc3d 	bl	80016e4 <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	88fa      	ldrh	r2, [r7, #6]
 8002e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d108      	bne.n	8002e94 <HAL_UART_Transmit+0x82>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e003      	b.n	8002e9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ea4:	e02a      	b.n	8002efc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f840 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e036      	b.n	8002f2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	e007      	b.n	8002eee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1cf      	bne.n	8002ea6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	; 0x40
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f810 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e006      	b.n	8002f2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b090      	sub	sp, #64	; 0x40
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	e050      	b.n	8002fea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4e:	d04c      	beq.n	8002fea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f56:	f7fe fbc5 	bl	80016e4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d241      	bcs.n	8002fea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f86:	637a      	str	r2, [r7, #52]	; 0x34
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fba:	623a      	str	r2, [r7, #32]
 8002fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	69f9      	ldr	r1, [r7, #28]
 8002fc0:	6a3a      	ldr	r2, [r7, #32]
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e00f      	b.n	800300a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d09f      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3740      	adds	r7, #64	; 0x40
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b0c0      	sub	sp, #256	; 0x100
 800301a:	af00      	add	r7, sp, #0
 800301c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	68d9      	ldr	r1, [r3, #12]
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	ea40 0301 	orr.w	r3, r0, r1
 800303c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800306c:	f021 010c 	bic.w	r1, r1, #12
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800307a:	430b      	orrs	r3, r1
 800307c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308e:	6999      	ldr	r1, [r3, #24]
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	ea40 0301 	orr.w	r3, r0, r1
 800309a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <UART_SetConfig+0x2cc>)
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d005      	beq.n	80030b4 <UART_SetConfig+0xa0>
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <UART_SetConfig+0x2d0>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d104      	bne.n	80030be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7ff fe4c 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 80030b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030bc:	e003      	b.n	80030c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030be:	f7ff fe33 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 80030c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	f040 810c 	bne.w	80032ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030e6:	4622      	mov	r2, r4
 80030e8:	462b      	mov	r3, r5
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ee:	415b      	adcs	r3, r3
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030f6:	4621      	mov	r1, r4
 80030f8:	eb12 0801 	adds.w	r8, r2, r1
 80030fc:	4629      	mov	r1, r5
 80030fe:	eb43 0901 	adc.w	r9, r3, r1
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800310e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003116:	4690      	mov	r8, r2
 8003118:	4699      	mov	r9, r3
 800311a:	4623      	mov	r3, r4
 800311c:	eb18 0303 	adds.w	r3, r8, r3
 8003120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003124:	462b      	mov	r3, r5
 8003126:	eb49 0303 	adc.w	r3, r9, r3
 800312a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800313a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800313e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003142:	460b      	mov	r3, r1
 8003144:	18db      	adds	r3, r3, r3
 8003146:	653b      	str	r3, [r7, #80]	; 0x50
 8003148:	4613      	mov	r3, r2
 800314a:	eb42 0303 	adc.w	r3, r2, r3
 800314e:	657b      	str	r3, [r7, #84]	; 0x54
 8003150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003158:	f7fd fd76 	bl	8000c48 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <UART_SetConfig+0x2d4>)
 8003162:	fba3 2302 	umull	r2, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	011c      	lsls	r4, r3, #4
 800316a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	64b9      	str	r1, [r7, #72]	; 0x48
 8003184:	415b      	adcs	r3, r3
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800318c:	4641      	mov	r1, r8
 800318e:	eb12 0a01 	adds.w	sl, r2, r1
 8003192:	4649      	mov	r1, r9
 8003194:	eb43 0b01 	adc.w	fp, r3, r1
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ac:	4692      	mov	sl, r2
 80031ae:	469b      	mov	fp, r3
 80031b0:	4643      	mov	r3, r8
 80031b2:	eb1a 0303 	adds.w	r3, sl, r3
 80031b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ba:	464b      	mov	r3, r9
 80031bc:	eb4b 0303 	adc.w	r3, fp, r3
 80031c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031d8:	460b      	mov	r3, r1
 80031da:	18db      	adds	r3, r3, r3
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
 80031de:	4613      	mov	r3, r2
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
 80031e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031ee:	f7fd fd2b 	bl	8000c48 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <UART_SetConfig+0x2d4>)
 80031fa:	fba3 2301 	umull	r2, r3, r3, r1
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2264      	movs	r2, #100	; 0x64
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	1acb      	subs	r3, r1, r3
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <UART_SetConfig+0x2d4>)
 8003210:	fba3 2302 	umull	r2, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800321c:	441c      	add	r4, r3
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800322c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	63b9      	str	r1, [r7, #56]	; 0x38
 8003238:	415b      	adcs	r3, r3
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003240:	4641      	mov	r1, r8
 8003242:	1851      	adds	r1, r2, r1
 8003244:	6339      	str	r1, [r7, #48]	; 0x30
 8003246:	4649      	mov	r1, r9
 8003248:	414b      	adcs	r3, r1
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003258:	4659      	mov	r1, fp
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003262:	4651      	mov	r1, sl
 8003264:	00ca      	lsls	r2, r1, #3
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	4603      	mov	r3, r0
 800326c:	4642      	mov	r2, r8
 800326e:	189b      	adds	r3, r3, r2
 8003270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003274:	464b      	mov	r3, r9
 8003276:	460a      	mov	r2, r1
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800328c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003294:	460b      	mov	r3, r1
 8003296:	18db      	adds	r3, r3, r3
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
 800329a:	4613      	mov	r3, r2
 800329c:	eb42 0303 	adc.w	r3, r2, r3
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032aa:	f7fd fccd 	bl	8000c48 <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <UART_SetConfig+0x2d4>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	3332      	adds	r3, #50	; 0x32
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <UART_SetConfig+0x2d4>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4422      	add	r2, r4
 80032da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032dc:	e106      	b.n	80034ec <UART_SetConfig+0x4d8>
 80032de:	bf00      	nop
 80032e0:	40011000 	.word	0x40011000
 80032e4:	40011400 	.word	0x40011400
 80032e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032fe:	4642      	mov	r2, r8
 8003300:	464b      	mov	r3, r9
 8003302:	1891      	adds	r1, r2, r2
 8003304:	6239      	str	r1, [r7, #32]
 8003306:	415b      	adcs	r3, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800330e:	4641      	mov	r1, r8
 8003310:	1854      	adds	r4, r2, r1
 8003312:	4649      	mov	r1, r9
 8003314:	eb43 0501 	adc.w	r5, r3, r1
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	00eb      	lsls	r3, r5, #3
 8003322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003326:	00e2      	lsls	r2, r4, #3
 8003328:	4614      	mov	r4, r2
 800332a:	461d      	mov	r5, r3
 800332c:	4643      	mov	r3, r8
 800332e:	18e3      	adds	r3, r4, r3
 8003330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003334:	464b      	mov	r3, r9
 8003336:	eb45 0303 	adc.w	r3, r5, r3
 800333a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800334a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800335a:	4629      	mov	r1, r5
 800335c:	008b      	lsls	r3, r1, #2
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003364:	4621      	mov	r1, r4
 8003366:	008a      	lsls	r2, r1, #2
 8003368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800336c:	f7fd fc6c 	bl	8000c48 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <UART_SetConfig+0x4e4>)
 8003376:	fba3 2302 	umull	r2, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	011c      	lsls	r4, r3, #4
 800337e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800338c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	1891      	adds	r1, r2, r2
 8003396:	61b9      	str	r1, [r7, #24]
 8003398:	415b      	adcs	r3, r3
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a0:	4641      	mov	r1, r8
 80033a2:	1851      	adds	r1, r2, r1
 80033a4:	6139      	str	r1, [r7, #16]
 80033a6:	4649      	mov	r1, r9
 80033a8:	414b      	adcs	r3, r1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b8:	4659      	mov	r1, fp
 80033ba:	00cb      	lsls	r3, r1, #3
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c2:	4651      	mov	r1, sl
 80033c4:	00ca      	lsls	r2, r1, #3
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	4642      	mov	r2, r8
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d4:	464b      	mov	r3, r9
 80033d6:	460a      	mov	r2, r1
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033f8:	4649      	mov	r1, r9
 80033fa:	008b      	lsls	r3, r1, #2
 80033fc:	4641      	mov	r1, r8
 80033fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003402:	4641      	mov	r1, r8
 8003404:	008a      	lsls	r2, r1, #2
 8003406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800340a:	f7fd fc1d 	bl	8000c48 <__aeabi_uldivmod>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4611      	mov	r1, r2
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <UART_SetConfig+0x4e4>)
 8003416:	fba3 2301 	umull	r2, r3, r3, r1
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2264      	movs	r2, #100	; 0x64
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	1acb      	subs	r3, r1, r3
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	3332      	adds	r3, #50	; 0x32
 8003428:	4a33      	ldr	r2, [pc, #204]	; (80034f8 <UART_SetConfig+0x4e4>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003434:	441c      	add	r4, r3
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343a:	2200      	movs	r2, #0
 800343c:	673b      	str	r3, [r7, #112]	; 0x70
 800343e:	677a      	str	r2, [r7, #116]	; 0x74
 8003440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003444:	4642      	mov	r2, r8
 8003446:	464b      	mov	r3, r9
 8003448:	1891      	adds	r1, r2, r2
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	415b      	adcs	r3, r3
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003454:	4641      	mov	r1, r8
 8003456:	1851      	adds	r1, r2, r1
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	4649      	mov	r1, r9
 800345c:	414b      	adcs	r3, r1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800346c:	4659      	mov	r1, fp
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	4651      	mov	r1, sl
 8003472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003476:	4651      	mov	r1, sl
 8003478:	00ca      	lsls	r2, r1, #3
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	4603      	mov	r3, r0
 8003480:	4642      	mov	r2, r8
 8003482:	189b      	adds	r3, r3, r2
 8003484:	66bb      	str	r3, [r7, #104]	; 0x68
 8003486:	464b      	mov	r3, r9
 8003488:	460a      	mov	r2, r1
 800348a:	eb42 0303 	adc.w	r3, r2, r3
 800348e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	663b      	str	r3, [r7, #96]	; 0x60
 800349a:	667a      	str	r2, [r7, #100]	; 0x64
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034a8:	4649      	mov	r1, r9
 80034aa:	008b      	lsls	r3, r1, #2
 80034ac:	4641      	mov	r1, r8
 80034ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b2:	4641      	mov	r1, r8
 80034b4:	008a      	lsls	r2, r1, #2
 80034b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034ba:	f7fd fbc5 	bl	8000c48 <__aeabi_uldivmod>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <UART_SetConfig+0x4e4>)
 80034c4:	fba3 1302 	umull	r1, r3, r3, r2
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	2164      	movs	r1, #100	; 0x64
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	3332      	adds	r3, #50	; 0x32
 80034d6:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <UART_SetConfig+0x4e4>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	f003 020f 	and.w	r2, r3, #15
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4422      	add	r2, r4
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034f2:	46bd      	mov	sp, r7
 80034f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f8:	51eb851f 	.word	0x51eb851f

080034fc <__cvt>:
 80034fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003500:	ec55 4b10 	vmov	r4, r5, d0
 8003504:	2d00      	cmp	r5, #0
 8003506:	460e      	mov	r6, r1
 8003508:	4619      	mov	r1, r3
 800350a:	462b      	mov	r3, r5
 800350c:	bfbb      	ittet	lt
 800350e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003512:	461d      	movlt	r5, r3
 8003514:	2300      	movge	r3, #0
 8003516:	232d      	movlt	r3, #45	; 0x2d
 8003518:	700b      	strb	r3, [r1, #0]
 800351a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800351c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003520:	4691      	mov	r9, r2
 8003522:	f023 0820 	bic.w	r8, r3, #32
 8003526:	bfbc      	itt	lt
 8003528:	4622      	movlt	r2, r4
 800352a:	4614      	movlt	r4, r2
 800352c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003530:	d005      	beq.n	800353e <__cvt+0x42>
 8003532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003536:	d100      	bne.n	800353a <__cvt+0x3e>
 8003538:	3601      	adds	r6, #1
 800353a:	2102      	movs	r1, #2
 800353c:	e000      	b.n	8003540 <__cvt+0x44>
 800353e:	2103      	movs	r1, #3
 8003540:	ab03      	add	r3, sp, #12
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	ab02      	add	r3, sp, #8
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	ec45 4b10 	vmov	d0, r4, r5
 800354c:	4653      	mov	r3, sl
 800354e:	4632      	mov	r2, r6
 8003550:	f000 fe7a 	bl	8004248 <_dtoa_r>
 8003554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003558:	4607      	mov	r7, r0
 800355a:	d102      	bne.n	8003562 <__cvt+0x66>
 800355c:	f019 0f01 	tst.w	r9, #1
 8003560:	d022      	beq.n	80035a8 <__cvt+0xac>
 8003562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003566:	eb07 0906 	add.w	r9, r7, r6
 800356a:	d110      	bne.n	800358e <__cvt+0x92>
 800356c:	783b      	ldrb	r3, [r7, #0]
 800356e:	2b30      	cmp	r3, #48	; 0x30
 8003570:	d10a      	bne.n	8003588 <__cvt+0x8c>
 8003572:	2200      	movs	r2, #0
 8003574:	2300      	movs	r3, #0
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fd faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800357e:	b918      	cbnz	r0, 8003588 <__cvt+0x8c>
 8003580:	f1c6 0601 	rsb	r6, r6, #1
 8003584:	f8ca 6000 	str.w	r6, [sl]
 8003588:	f8da 3000 	ldr.w	r3, [sl]
 800358c:	4499      	add	r9, r3
 800358e:	2200      	movs	r2, #0
 8003590:	2300      	movs	r3, #0
 8003592:	4620      	mov	r0, r4
 8003594:	4629      	mov	r1, r5
 8003596:	f7fd fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800359a:	b108      	cbz	r0, 80035a0 <__cvt+0xa4>
 800359c:	f8cd 900c 	str.w	r9, [sp, #12]
 80035a0:	2230      	movs	r2, #48	; 0x30
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	454b      	cmp	r3, r9
 80035a6:	d307      	bcc.n	80035b8 <__cvt+0xbc>
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035ac:	1bdb      	subs	r3, r3, r7
 80035ae:	4638      	mov	r0, r7
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	b004      	add	sp, #16
 80035b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b8:	1c59      	adds	r1, r3, #1
 80035ba:	9103      	str	r1, [sp, #12]
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e7f0      	b.n	80035a2 <__cvt+0xa6>

080035c0 <__exponent>:
 80035c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c2:	4603      	mov	r3, r0
 80035c4:	2900      	cmp	r1, #0
 80035c6:	bfb8      	it	lt
 80035c8:	4249      	neglt	r1, r1
 80035ca:	f803 2b02 	strb.w	r2, [r3], #2
 80035ce:	bfb4      	ite	lt
 80035d0:	222d      	movlt	r2, #45	; 0x2d
 80035d2:	222b      	movge	r2, #43	; 0x2b
 80035d4:	2909      	cmp	r1, #9
 80035d6:	7042      	strb	r2, [r0, #1]
 80035d8:	dd2a      	ble.n	8003630 <__exponent+0x70>
 80035da:	f10d 0207 	add.w	r2, sp, #7
 80035de:	4617      	mov	r7, r2
 80035e0:	260a      	movs	r6, #10
 80035e2:	4694      	mov	ip, r2
 80035e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80035e8:	fb06 1415 	mls	r4, r6, r5, r1
 80035ec:	3430      	adds	r4, #48	; 0x30
 80035ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80035f2:	460c      	mov	r4, r1
 80035f4:	2c63      	cmp	r4, #99	; 0x63
 80035f6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80035fa:	4629      	mov	r1, r5
 80035fc:	dcf1      	bgt.n	80035e2 <__exponent+0x22>
 80035fe:	3130      	adds	r1, #48	; 0x30
 8003600:	f1ac 0402 	sub.w	r4, ip, #2
 8003604:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003608:	1c41      	adds	r1, r0, #1
 800360a:	4622      	mov	r2, r4
 800360c:	42ba      	cmp	r2, r7
 800360e:	d30a      	bcc.n	8003626 <__exponent+0x66>
 8003610:	f10d 0209 	add.w	r2, sp, #9
 8003614:	eba2 020c 	sub.w	r2, r2, ip
 8003618:	42bc      	cmp	r4, r7
 800361a:	bf88      	it	hi
 800361c:	2200      	movhi	r2, #0
 800361e:	4413      	add	r3, r2
 8003620:	1a18      	subs	r0, r3, r0
 8003622:	b003      	add	sp, #12
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	f812 5b01 	ldrb.w	r5, [r2], #1
 800362a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800362e:	e7ed      	b.n	800360c <__exponent+0x4c>
 8003630:	2330      	movs	r3, #48	; 0x30
 8003632:	3130      	adds	r1, #48	; 0x30
 8003634:	7083      	strb	r3, [r0, #2]
 8003636:	70c1      	strb	r1, [r0, #3]
 8003638:	1d03      	adds	r3, r0, #4
 800363a:	e7f1      	b.n	8003620 <__exponent+0x60>

0800363c <_printf_float>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	ed2d 8b02 	vpush	{d8}
 8003644:	b08d      	sub	sp, #52	; 0x34
 8003646:	460c      	mov	r4, r1
 8003648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800364c:	4616      	mov	r6, r2
 800364e:	461f      	mov	r7, r3
 8003650:	4605      	mov	r5, r0
 8003652:	f000 fcf9 	bl	8004048 <_localeconv_r>
 8003656:	f8d0 a000 	ldr.w	sl, [r0]
 800365a:	4650      	mov	r0, sl
 800365c:	f7fc fe08 	bl	8000270 <strlen>
 8003660:	2300      	movs	r3, #0
 8003662:	930a      	str	r3, [sp, #40]	; 0x28
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	9305      	str	r3, [sp, #20]
 8003668:	f8d8 3000 	ldr.w	r3, [r8]
 800366c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003670:	3307      	adds	r3, #7
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	f103 0208 	add.w	r2, r3, #8
 800367a:	f8c8 2000 	str.w	r2, [r8]
 800367e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003682:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003686:	9307      	str	r3, [sp, #28]
 8003688:	f8cd 8018 	str.w	r8, [sp, #24]
 800368c:	ee08 0a10 	vmov	s16, r0
 8003690:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003698:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <_printf_float+0x2d8>)
 800369a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800369e:	f7fd fa45 	bl	8000b2c <__aeabi_dcmpun>
 80036a2:	bb88      	cbnz	r0, 8003708 <_printf_float+0xcc>
 80036a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036a8:	4b9a      	ldr	r3, [pc, #616]	; (8003914 <_printf_float+0x2d8>)
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ae:	f7fd fa1f 	bl	8000af0 <__aeabi_dcmple>
 80036b2:	bb48      	cbnz	r0, 8003708 <_printf_float+0xcc>
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fd fa0e 	bl	8000adc <__aeabi_dcmplt>
 80036c0:	b110      	cbz	r0, 80036c8 <_printf_float+0x8c>
 80036c2:	232d      	movs	r3, #45	; 0x2d
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	4a93      	ldr	r2, [pc, #588]	; (8003918 <_printf_float+0x2dc>)
 80036ca:	4b94      	ldr	r3, [pc, #592]	; (800391c <_printf_float+0x2e0>)
 80036cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80036d0:	bf94      	ite	ls
 80036d2:	4690      	movls	r8, r2
 80036d4:	4698      	movhi	r8, r3
 80036d6:	2303      	movs	r3, #3
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	9b05      	ldr	r3, [sp, #20]
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	f04f 0900 	mov.w	r9, #0
 80036e6:	9700      	str	r7, [sp, #0]
 80036e8:	4633      	mov	r3, r6
 80036ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80036ec:	4621      	mov	r1, r4
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 f9da 	bl	8003aa8 <_printf_common>
 80036f4:	3001      	adds	r0, #1
 80036f6:	f040 8090 	bne.w	800381a <_printf_float+0x1de>
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036fe:	b00d      	add	sp, #52	; 0x34
 8003700:	ecbd 8b02 	vpop	{d8}
 8003704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	4640      	mov	r0, r8
 800370e:	4649      	mov	r1, r9
 8003710:	f7fd fa0c 	bl	8000b2c <__aeabi_dcmpun>
 8003714:	b140      	cbz	r0, 8003728 <_printf_float+0xec>
 8003716:	464b      	mov	r3, r9
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfbc      	itt	lt
 800371c:	232d      	movlt	r3, #45	; 0x2d
 800371e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003722:	4a7f      	ldr	r2, [pc, #508]	; (8003920 <_printf_float+0x2e4>)
 8003724:	4b7f      	ldr	r3, [pc, #508]	; (8003924 <_printf_float+0x2e8>)
 8003726:	e7d1      	b.n	80036cc <_printf_float+0x90>
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800372e:	9206      	str	r2, [sp, #24]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	d13f      	bne.n	80037b4 <_printf_float+0x178>
 8003734:	2306      	movs	r3, #6
 8003736:	6063      	str	r3, [r4, #4]
 8003738:	9b05      	ldr	r3, [sp, #20]
 800373a:	6861      	ldr	r1, [r4, #4]
 800373c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003740:	2300      	movs	r3, #0
 8003742:	9303      	str	r3, [sp, #12]
 8003744:	ab0a      	add	r3, sp, #40	; 0x28
 8003746:	e9cd b301 	strd	fp, r3, [sp, #4]
 800374a:	ab09      	add	r3, sp, #36	; 0x24
 800374c:	ec49 8b10 	vmov	d0, r8, r9
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003758:	4628      	mov	r0, r5
 800375a:	f7ff fecf 	bl	80034fc <__cvt>
 800375e:	9b06      	ldr	r3, [sp, #24]
 8003760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003762:	2b47      	cmp	r3, #71	; 0x47
 8003764:	4680      	mov	r8, r0
 8003766:	d108      	bne.n	800377a <_printf_float+0x13e>
 8003768:	1cc8      	adds	r0, r1, #3
 800376a:	db02      	blt.n	8003772 <_printf_float+0x136>
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	4299      	cmp	r1, r3
 8003770:	dd41      	ble.n	80037f6 <_printf_float+0x1ba>
 8003772:	f1ab 0302 	sub.w	r3, fp, #2
 8003776:	fa5f fb83 	uxtb.w	fp, r3
 800377a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800377e:	d820      	bhi.n	80037c2 <_printf_float+0x186>
 8003780:	3901      	subs	r1, #1
 8003782:	465a      	mov	r2, fp
 8003784:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003788:	9109      	str	r1, [sp, #36]	; 0x24
 800378a:	f7ff ff19 	bl	80035c0 <__exponent>
 800378e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003790:	1813      	adds	r3, r2, r0
 8003792:	2a01      	cmp	r2, #1
 8003794:	4681      	mov	r9, r0
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	dc02      	bgt.n	80037a0 <_printf_float+0x164>
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	07d2      	lsls	r2, r2, #31
 800379e:	d501      	bpl.n	80037a4 <_printf_float+0x168>
 80037a0:	3301      	adds	r3, #1
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d09c      	beq.n	80036e6 <_printf_float+0xaa>
 80037ac:	232d      	movs	r3, #45	; 0x2d
 80037ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b2:	e798      	b.n	80036e6 <_printf_float+0xaa>
 80037b4:	9a06      	ldr	r2, [sp, #24]
 80037b6:	2a47      	cmp	r2, #71	; 0x47
 80037b8:	d1be      	bne.n	8003738 <_printf_float+0xfc>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1bc      	bne.n	8003738 <_printf_float+0xfc>
 80037be:	2301      	movs	r3, #1
 80037c0:	e7b9      	b.n	8003736 <_printf_float+0xfa>
 80037c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80037c6:	d118      	bne.n	80037fa <_printf_float+0x1be>
 80037c8:	2900      	cmp	r1, #0
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	dd0b      	ble.n	80037e6 <_printf_float+0x1aa>
 80037ce:	6121      	str	r1, [r4, #16]
 80037d0:	b913      	cbnz	r3, 80037d8 <_printf_float+0x19c>
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	07d0      	lsls	r0, r2, #31
 80037d6:	d502      	bpl.n	80037de <_printf_float+0x1a2>
 80037d8:	3301      	adds	r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	65a1      	str	r1, [r4, #88]	; 0x58
 80037e0:	f04f 0900 	mov.w	r9, #0
 80037e4:	e7de      	b.n	80037a4 <_printf_float+0x168>
 80037e6:	b913      	cbnz	r3, 80037ee <_printf_float+0x1b2>
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	07d2      	lsls	r2, r2, #31
 80037ec:	d501      	bpl.n	80037f2 <_printf_float+0x1b6>
 80037ee:	3302      	adds	r3, #2
 80037f0:	e7f4      	b.n	80037dc <_printf_float+0x1a0>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e7f2      	b.n	80037dc <_printf_float+0x1a0>
 80037f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80037fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037fc:	4299      	cmp	r1, r3
 80037fe:	db05      	blt.n	800380c <_printf_float+0x1d0>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	6121      	str	r1, [r4, #16]
 8003804:	07d8      	lsls	r0, r3, #31
 8003806:	d5ea      	bpl.n	80037de <_printf_float+0x1a2>
 8003808:	1c4b      	adds	r3, r1, #1
 800380a:	e7e7      	b.n	80037dc <_printf_float+0x1a0>
 800380c:	2900      	cmp	r1, #0
 800380e:	bfd4      	ite	le
 8003810:	f1c1 0202 	rsble	r2, r1, #2
 8003814:	2201      	movgt	r2, #1
 8003816:	4413      	add	r3, r2
 8003818:	e7e0      	b.n	80037dc <_printf_float+0x1a0>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	055a      	lsls	r2, r3, #21
 800381e:	d407      	bmi.n	8003830 <_printf_float+0x1f4>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	4642      	mov	r2, r8
 8003824:	4631      	mov	r1, r6
 8003826:	4628      	mov	r0, r5
 8003828:	47b8      	blx	r7
 800382a:	3001      	adds	r0, #1
 800382c:	d12c      	bne.n	8003888 <_printf_float+0x24c>
 800382e:	e764      	b.n	80036fa <_printf_float+0xbe>
 8003830:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003834:	f240 80e0 	bls.w	80039f8 <_printf_float+0x3bc>
 8003838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800383c:	2200      	movs	r2, #0
 800383e:	2300      	movs	r3, #0
 8003840:	f7fd f942 	bl	8000ac8 <__aeabi_dcmpeq>
 8003844:	2800      	cmp	r0, #0
 8003846:	d034      	beq.n	80038b2 <_printf_float+0x276>
 8003848:	4a37      	ldr	r2, [pc, #220]	; (8003928 <_printf_float+0x2ec>)
 800384a:	2301      	movs	r3, #1
 800384c:	4631      	mov	r1, r6
 800384e:	4628      	mov	r0, r5
 8003850:	47b8      	blx	r7
 8003852:	3001      	adds	r0, #1
 8003854:	f43f af51 	beq.w	80036fa <_printf_float+0xbe>
 8003858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385c:	429a      	cmp	r2, r3
 800385e:	db02      	blt.n	8003866 <_printf_float+0x22a>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07d8      	lsls	r0, r3, #31
 8003864:	d510      	bpl.n	8003888 <_printf_float+0x24c>
 8003866:	ee18 3a10 	vmov	r3, s16
 800386a:	4652      	mov	r2, sl
 800386c:	4631      	mov	r1, r6
 800386e:	4628      	mov	r0, r5
 8003870:	47b8      	blx	r7
 8003872:	3001      	adds	r0, #1
 8003874:	f43f af41 	beq.w	80036fa <_printf_float+0xbe>
 8003878:	f04f 0800 	mov.w	r8, #0
 800387c:	f104 091a 	add.w	r9, r4, #26
 8003880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	4543      	cmp	r3, r8
 8003886:	dc09      	bgt.n	800389c <_printf_float+0x260>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	079b      	lsls	r3, r3, #30
 800388c:	f100 8107 	bmi.w	8003a9e <_printf_float+0x462>
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003894:	4298      	cmp	r0, r3
 8003896:	bfb8      	it	lt
 8003898:	4618      	movlt	r0, r3
 800389a:	e730      	b.n	80036fe <_printf_float+0xc2>
 800389c:	2301      	movs	r3, #1
 800389e:	464a      	mov	r2, r9
 80038a0:	4631      	mov	r1, r6
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b8      	blx	r7
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f af27 	beq.w	80036fa <_printf_float+0xbe>
 80038ac:	f108 0801 	add.w	r8, r8, #1
 80038b0:	e7e6      	b.n	8003880 <_printf_float+0x244>
 80038b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dc39      	bgt.n	800392c <_printf_float+0x2f0>
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <_printf_float+0x2ec>)
 80038ba:	2301      	movs	r3, #1
 80038bc:	4631      	mov	r1, r6
 80038be:	4628      	mov	r0, r5
 80038c0:	47b8      	blx	r7
 80038c2:	3001      	adds	r0, #1
 80038c4:	f43f af19 	beq.w	80036fa <_printf_float+0xbe>
 80038c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d102      	bne.n	80038d6 <_printf_float+0x29a>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	07d9      	lsls	r1, r3, #31
 80038d4:	d5d8      	bpl.n	8003888 <_printf_float+0x24c>
 80038d6:	ee18 3a10 	vmov	r3, s16
 80038da:	4652      	mov	r2, sl
 80038dc:	4631      	mov	r1, r6
 80038de:	4628      	mov	r0, r5
 80038e0:	47b8      	blx	r7
 80038e2:	3001      	adds	r0, #1
 80038e4:	f43f af09 	beq.w	80036fa <_printf_float+0xbe>
 80038e8:	f04f 0900 	mov.w	r9, #0
 80038ec:	f104 0a1a 	add.w	sl, r4, #26
 80038f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f2:	425b      	negs	r3, r3
 80038f4:	454b      	cmp	r3, r9
 80038f6:	dc01      	bgt.n	80038fc <_printf_float+0x2c0>
 80038f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038fa:	e792      	b.n	8003822 <_printf_float+0x1e6>
 80038fc:	2301      	movs	r3, #1
 80038fe:	4652      	mov	r2, sl
 8003900:	4631      	mov	r1, r6
 8003902:	4628      	mov	r0, r5
 8003904:	47b8      	blx	r7
 8003906:	3001      	adds	r0, #1
 8003908:	f43f aef7 	beq.w	80036fa <_printf_float+0xbe>
 800390c:	f109 0901 	add.w	r9, r9, #1
 8003910:	e7ee      	b.n	80038f0 <_printf_float+0x2b4>
 8003912:	bf00      	nop
 8003914:	7fefffff 	.word	0x7fefffff
 8003918:	080062a0 	.word	0x080062a0
 800391c:	080062a4 	.word	0x080062a4
 8003920:	080062a8 	.word	0x080062a8
 8003924:	080062ac 	.word	0x080062ac
 8003928:	080062b0 	.word	0x080062b0
 800392c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800392e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003930:	429a      	cmp	r2, r3
 8003932:	bfa8      	it	ge
 8003934:	461a      	movge	r2, r3
 8003936:	2a00      	cmp	r2, #0
 8003938:	4691      	mov	r9, r2
 800393a:	dc37      	bgt.n	80039ac <_printf_float+0x370>
 800393c:	f04f 0b00 	mov.w	fp, #0
 8003940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003944:	f104 021a 	add.w	r2, r4, #26
 8003948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800394a:	9305      	str	r3, [sp, #20]
 800394c:	eba3 0309 	sub.w	r3, r3, r9
 8003950:	455b      	cmp	r3, fp
 8003952:	dc33      	bgt.n	80039bc <_printf_float+0x380>
 8003954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003958:	429a      	cmp	r2, r3
 800395a:	db3b      	blt.n	80039d4 <_printf_float+0x398>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	07da      	lsls	r2, r3, #31
 8003960:	d438      	bmi.n	80039d4 <_printf_float+0x398>
 8003962:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003966:	eba2 0903 	sub.w	r9, r2, r3
 800396a:	9b05      	ldr	r3, [sp, #20]
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	4591      	cmp	r9, r2
 8003970:	bfa8      	it	ge
 8003972:	4691      	movge	r9, r2
 8003974:	f1b9 0f00 	cmp.w	r9, #0
 8003978:	dc35      	bgt.n	80039e6 <_printf_float+0x3aa>
 800397a:	f04f 0800 	mov.w	r8, #0
 800397e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003982:	f104 0a1a 	add.w	sl, r4, #26
 8003986:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	eba3 0309 	sub.w	r3, r3, r9
 8003990:	4543      	cmp	r3, r8
 8003992:	f77f af79 	ble.w	8003888 <_printf_float+0x24c>
 8003996:	2301      	movs	r3, #1
 8003998:	4652      	mov	r2, sl
 800399a:	4631      	mov	r1, r6
 800399c:	4628      	mov	r0, r5
 800399e:	47b8      	blx	r7
 80039a0:	3001      	adds	r0, #1
 80039a2:	f43f aeaa 	beq.w	80036fa <_printf_float+0xbe>
 80039a6:	f108 0801 	add.w	r8, r8, #1
 80039aa:	e7ec      	b.n	8003986 <_printf_float+0x34a>
 80039ac:	4613      	mov	r3, r2
 80039ae:	4631      	mov	r1, r6
 80039b0:	4642      	mov	r2, r8
 80039b2:	4628      	mov	r0, r5
 80039b4:	47b8      	blx	r7
 80039b6:	3001      	adds	r0, #1
 80039b8:	d1c0      	bne.n	800393c <_printf_float+0x300>
 80039ba:	e69e      	b.n	80036fa <_printf_float+0xbe>
 80039bc:	2301      	movs	r3, #1
 80039be:	4631      	mov	r1, r6
 80039c0:	4628      	mov	r0, r5
 80039c2:	9205      	str	r2, [sp, #20]
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f ae97 	beq.w	80036fa <_printf_float+0xbe>
 80039cc:	9a05      	ldr	r2, [sp, #20]
 80039ce:	f10b 0b01 	add.w	fp, fp, #1
 80039d2:	e7b9      	b.n	8003948 <_printf_float+0x30c>
 80039d4:	ee18 3a10 	vmov	r3, s16
 80039d8:	4652      	mov	r2, sl
 80039da:	4631      	mov	r1, r6
 80039dc:	4628      	mov	r0, r5
 80039de:	47b8      	blx	r7
 80039e0:	3001      	adds	r0, #1
 80039e2:	d1be      	bne.n	8003962 <_printf_float+0x326>
 80039e4:	e689      	b.n	80036fa <_printf_float+0xbe>
 80039e6:	9a05      	ldr	r2, [sp, #20]
 80039e8:	464b      	mov	r3, r9
 80039ea:	4442      	add	r2, r8
 80039ec:	4631      	mov	r1, r6
 80039ee:	4628      	mov	r0, r5
 80039f0:	47b8      	blx	r7
 80039f2:	3001      	adds	r0, #1
 80039f4:	d1c1      	bne.n	800397a <_printf_float+0x33e>
 80039f6:	e680      	b.n	80036fa <_printf_float+0xbe>
 80039f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039fa:	2a01      	cmp	r2, #1
 80039fc:	dc01      	bgt.n	8003a02 <_printf_float+0x3c6>
 80039fe:	07db      	lsls	r3, r3, #31
 8003a00:	d53a      	bpl.n	8003a78 <_printf_float+0x43c>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4642      	mov	r2, r8
 8003a06:	4631      	mov	r1, r6
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b8      	blx	r7
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	f43f ae74 	beq.w	80036fa <_printf_float+0xbe>
 8003a12:	ee18 3a10 	vmov	r3, s16
 8003a16:	4652      	mov	r2, sl
 8003a18:	4631      	mov	r1, r6
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	47b8      	blx	r7
 8003a1e:	3001      	adds	r0, #1
 8003a20:	f43f ae6b 	beq.w	80036fa <_printf_float+0xbe>
 8003a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a30:	f7fd f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a34:	b9d8      	cbnz	r0, 8003a6e <_printf_float+0x432>
 8003a36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003a3a:	f108 0201 	add.w	r2, r8, #1
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	d10e      	bne.n	8003a66 <_printf_float+0x42a>
 8003a48:	e657      	b.n	80036fa <_printf_float+0xbe>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b8      	blx	r7
 8003a54:	3001      	adds	r0, #1
 8003a56:	f43f ae50 	beq.w	80036fa <_printf_float+0xbe>
 8003a5a:	f108 0801 	add.w	r8, r8, #1
 8003a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	4543      	cmp	r3, r8
 8003a64:	dcf1      	bgt.n	8003a4a <_printf_float+0x40e>
 8003a66:	464b      	mov	r3, r9
 8003a68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a6c:	e6da      	b.n	8003824 <_printf_float+0x1e8>
 8003a6e:	f04f 0800 	mov.w	r8, #0
 8003a72:	f104 0a1a 	add.w	sl, r4, #26
 8003a76:	e7f2      	b.n	8003a5e <_printf_float+0x422>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4642      	mov	r2, r8
 8003a7c:	e7df      	b.n	8003a3e <_printf_float+0x402>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	464a      	mov	r2, r9
 8003a82:	4631      	mov	r1, r6
 8003a84:	4628      	mov	r0, r5
 8003a86:	47b8      	blx	r7
 8003a88:	3001      	adds	r0, #1
 8003a8a:	f43f ae36 	beq.w	80036fa <_printf_float+0xbe>
 8003a8e:	f108 0801 	add.w	r8, r8, #1
 8003a92:	68e3      	ldr	r3, [r4, #12]
 8003a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a96:	1a5b      	subs	r3, r3, r1
 8003a98:	4543      	cmp	r3, r8
 8003a9a:	dcf0      	bgt.n	8003a7e <_printf_float+0x442>
 8003a9c:	e6f8      	b.n	8003890 <_printf_float+0x254>
 8003a9e:	f04f 0800 	mov.w	r8, #0
 8003aa2:	f104 0919 	add.w	r9, r4, #25
 8003aa6:	e7f4      	b.n	8003a92 <_printf_float+0x456>

08003aa8 <_printf_common>:
 8003aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	4616      	mov	r6, r2
 8003aae:	4699      	mov	r9, r3
 8003ab0:	688a      	ldr	r2, [r1, #8]
 8003ab2:	690b      	ldr	r3, [r1, #16]
 8003ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bfb8      	it	lt
 8003abc:	4613      	movlt	r3, r2
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	b10a      	cbz	r2, 8003ace <_printf_common+0x26>
 8003aca:	3301      	adds	r3, #1
 8003acc:	6033      	str	r3, [r6, #0]
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	0699      	lsls	r1, r3, #26
 8003ad2:	bf42      	ittt	mi
 8003ad4:	6833      	ldrmi	r3, [r6, #0]
 8003ad6:	3302      	addmi	r3, #2
 8003ad8:	6033      	strmi	r3, [r6, #0]
 8003ada:	6825      	ldr	r5, [r4, #0]
 8003adc:	f015 0506 	ands.w	r5, r5, #6
 8003ae0:	d106      	bne.n	8003af0 <_printf_common+0x48>
 8003ae2:	f104 0a19 	add.w	sl, r4, #25
 8003ae6:	68e3      	ldr	r3, [r4, #12]
 8003ae8:	6832      	ldr	r2, [r6, #0]
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	42ab      	cmp	r3, r5
 8003aee:	dc26      	bgt.n	8003b3e <_printf_common+0x96>
 8003af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003af4:	1e13      	subs	r3, r2, #0
 8003af6:	6822      	ldr	r2, [r4, #0]
 8003af8:	bf18      	it	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	0692      	lsls	r2, r2, #26
 8003afe:	d42b      	bmi.n	8003b58 <_printf_common+0xb0>
 8003b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b04:	4649      	mov	r1, r9
 8003b06:	4638      	mov	r0, r7
 8003b08:	47c0      	blx	r8
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d01e      	beq.n	8003b4c <_printf_common+0xa4>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	6922      	ldr	r2, [r4, #16]
 8003b12:	f003 0306 	and.w	r3, r3, #6
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	bf02      	ittt	eq
 8003b1a:	68e5      	ldreq	r5, [r4, #12]
 8003b1c:	6833      	ldreq	r3, [r6, #0]
 8003b1e:	1aed      	subeq	r5, r5, r3
 8003b20:	68a3      	ldr	r3, [r4, #8]
 8003b22:	bf0c      	ite	eq
 8003b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b28:	2500      	movne	r5, #0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfc4      	itt	gt
 8003b2e:	1a9b      	subgt	r3, r3, r2
 8003b30:	18ed      	addgt	r5, r5, r3
 8003b32:	2600      	movs	r6, #0
 8003b34:	341a      	adds	r4, #26
 8003b36:	42b5      	cmp	r5, r6
 8003b38:	d11a      	bne.n	8003b70 <_printf_common+0xc8>
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e008      	b.n	8003b50 <_printf_common+0xa8>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4652      	mov	r2, sl
 8003b42:	4649      	mov	r1, r9
 8003b44:	4638      	mov	r0, r7
 8003b46:	47c0      	blx	r8
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d103      	bne.n	8003b54 <_printf_common+0xac>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	3501      	adds	r5, #1
 8003b56:	e7c6      	b.n	8003ae6 <_printf_common+0x3e>
 8003b58:	18e1      	adds	r1, r4, r3
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	2030      	movs	r0, #48	; 0x30
 8003b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b62:	4422      	add	r2, r4
 8003b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	e7c7      	b.n	8003b00 <_printf_common+0x58>
 8003b70:	2301      	movs	r3, #1
 8003b72:	4622      	mov	r2, r4
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	47c0      	blx	r8
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d0e6      	beq.n	8003b4c <_printf_common+0xa4>
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7d9      	b.n	8003b36 <_printf_common+0x8e>
	...

08003b84 <_printf_i>:
 8003b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	7e0f      	ldrb	r7, [r1, #24]
 8003b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b8c:	2f78      	cmp	r7, #120	; 0x78
 8003b8e:	4691      	mov	r9, r2
 8003b90:	4680      	mov	r8, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	469a      	mov	sl, r3
 8003b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b9a:	d807      	bhi.n	8003bac <_printf_i+0x28>
 8003b9c:	2f62      	cmp	r7, #98	; 0x62
 8003b9e:	d80a      	bhi.n	8003bb6 <_printf_i+0x32>
 8003ba0:	2f00      	cmp	r7, #0
 8003ba2:	f000 80d4 	beq.w	8003d4e <_printf_i+0x1ca>
 8003ba6:	2f58      	cmp	r7, #88	; 0x58
 8003ba8:	f000 80c0 	beq.w	8003d2c <_printf_i+0x1a8>
 8003bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bb4:	e03a      	b.n	8003c2c <_printf_i+0xa8>
 8003bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bba:	2b15      	cmp	r3, #21
 8003bbc:	d8f6      	bhi.n	8003bac <_printf_i+0x28>
 8003bbe:	a101      	add	r1, pc, #4	; (adr r1, 8003bc4 <_printf_i+0x40>)
 8003bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc4:	08003c1d 	.word	0x08003c1d
 8003bc8:	08003c31 	.word	0x08003c31
 8003bcc:	08003bad 	.word	0x08003bad
 8003bd0:	08003bad 	.word	0x08003bad
 8003bd4:	08003bad 	.word	0x08003bad
 8003bd8:	08003bad 	.word	0x08003bad
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003bad 	.word	0x08003bad
 8003be4:	08003bad 	.word	0x08003bad
 8003be8:	08003bad 	.word	0x08003bad
 8003bec:	08003bad 	.word	0x08003bad
 8003bf0:	08003d35 	.word	0x08003d35
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003cef 	.word	0x08003cef
 8003bfc:	08003bad 	.word	0x08003bad
 8003c00:	08003bad 	.word	0x08003bad
 8003c04:	08003d57 	.word	0x08003d57
 8003c08:	08003bad 	.word	0x08003bad
 8003c0c:	08003c5d 	.word	0x08003c5d
 8003c10:	08003bad 	.word	0x08003bad
 8003c14:	08003bad 	.word	0x08003bad
 8003c18:	08003cf7 	.word	0x08003cf7
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	1d1a      	adds	r2, r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	602a      	str	r2, [r5, #0]
 8003c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e09f      	b.n	8003d70 <_printf_i+0x1ec>
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	0607      	lsls	r7, r0, #24
 8003c36:	f103 0104 	add.w	r1, r3, #4
 8003c3a:	6029      	str	r1, [r5, #0]
 8003c3c:	d501      	bpl.n	8003c42 <_printf_i+0xbe>
 8003c3e:	681e      	ldr	r6, [r3, #0]
 8003c40:	e003      	b.n	8003c4a <_printf_i+0xc6>
 8003c42:	0646      	lsls	r6, r0, #25
 8003c44:	d5fb      	bpl.n	8003c3e <_printf_i+0xba>
 8003c46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	da03      	bge.n	8003c56 <_printf_i+0xd2>
 8003c4e:	232d      	movs	r3, #45	; 0x2d
 8003c50:	4276      	negs	r6, r6
 8003c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c56:	485a      	ldr	r0, [pc, #360]	; (8003dc0 <_printf_i+0x23c>)
 8003c58:	230a      	movs	r3, #10
 8003c5a:	e012      	b.n	8003c82 <_printf_i+0xfe>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	1d19      	adds	r1, r3, #4
 8003c62:	6029      	str	r1, [r5, #0]
 8003c64:	0605      	lsls	r5, r0, #24
 8003c66:	d501      	bpl.n	8003c6c <_printf_i+0xe8>
 8003c68:	681e      	ldr	r6, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <_printf_i+0xee>
 8003c6c:	0641      	lsls	r1, r0, #25
 8003c6e:	d5fb      	bpl.n	8003c68 <_printf_i+0xe4>
 8003c70:	881e      	ldrh	r6, [r3, #0]
 8003c72:	4853      	ldr	r0, [pc, #332]	; (8003dc0 <_printf_i+0x23c>)
 8003c74:	2f6f      	cmp	r7, #111	; 0x6f
 8003c76:	bf0c      	ite	eq
 8003c78:	2308      	moveq	r3, #8
 8003c7a:	230a      	movne	r3, #10
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c82:	6865      	ldr	r5, [r4, #4]
 8003c84:	60a5      	str	r5, [r4, #8]
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	bfa2      	ittt	ge
 8003c8a:	6821      	ldrge	r1, [r4, #0]
 8003c8c:	f021 0104 	bicge.w	r1, r1, #4
 8003c90:	6021      	strge	r1, [r4, #0]
 8003c92:	b90e      	cbnz	r6, 8003c98 <_printf_i+0x114>
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	d04b      	beq.n	8003d30 <_printf_i+0x1ac>
 8003c98:	4615      	mov	r5, r2
 8003c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003ca2:	5dc7      	ldrb	r7, [r0, r7]
 8003ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ca8:	4637      	mov	r7, r6
 8003caa:	42bb      	cmp	r3, r7
 8003cac:	460e      	mov	r6, r1
 8003cae:	d9f4      	bls.n	8003c9a <_printf_i+0x116>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d10b      	bne.n	8003ccc <_printf_i+0x148>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	07de      	lsls	r6, r3, #31
 8003cb8:	d508      	bpl.n	8003ccc <_printf_i+0x148>
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	6861      	ldr	r1, [r4, #4]
 8003cbe:	4299      	cmp	r1, r3
 8003cc0:	bfde      	ittt	le
 8003cc2:	2330      	movle	r3, #48	; 0x30
 8003cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ccc:	1b52      	subs	r2, r2, r5
 8003cce:	6122      	str	r2, [r4, #16]
 8003cd0:	f8cd a000 	str.w	sl, [sp]
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	aa03      	add	r2, sp, #12
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7ff fee4 	bl	8003aa8 <_printf_common>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d14a      	bne.n	8003d7a <_printf_i+0x1f6>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce8:	b004      	add	sp, #16
 8003cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	f043 0320 	orr.w	r3, r3, #32
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	4833      	ldr	r0, [pc, #204]	; (8003dc4 <_printf_i+0x240>)
 8003cf8:	2778      	movs	r7, #120	; 0x78
 8003cfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	6829      	ldr	r1, [r5, #0]
 8003d02:	061f      	lsls	r7, r3, #24
 8003d04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d08:	d402      	bmi.n	8003d10 <_printf_i+0x18c>
 8003d0a:	065f      	lsls	r7, r3, #25
 8003d0c:	bf48      	it	mi
 8003d0e:	b2b6      	uxthmi	r6, r6
 8003d10:	07df      	lsls	r7, r3, #31
 8003d12:	bf48      	it	mi
 8003d14:	f043 0320 	orrmi.w	r3, r3, #32
 8003d18:	6029      	str	r1, [r5, #0]
 8003d1a:	bf48      	it	mi
 8003d1c:	6023      	strmi	r3, [r4, #0]
 8003d1e:	b91e      	cbnz	r6, 8003d28 <_printf_i+0x1a4>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	2310      	movs	r3, #16
 8003d2a:	e7a7      	b.n	8003c7c <_printf_i+0xf8>
 8003d2c:	4824      	ldr	r0, [pc, #144]	; (8003dc0 <_printf_i+0x23c>)
 8003d2e:	e7e4      	b.n	8003cfa <_printf_i+0x176>
 8003d30:	4615      	mov	r5, r2
 8003d32:	e7bd      	b.n	8003cb0 <_printf_i+0x12c>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	6826      	ldr	r6, [r4, #0]
 8003d38:	6961      	ldr	r1, [r4, #20]
 8003d3a:	1d18      	adds	r0, r3, #4
 8003d3c:	6028      	str	r0, [r5, #0]
 8003d3e:	0635      	lsls	r5, r6, #24
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	d501      	bpl.n	8003d48 <_printf_i+0x1c4>
 8003d44:	6019      	str	r1, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <_printf_i+0x1ca>
 8003d48:	0670      	lsls	r0, r6, #25
 8003d4a:	d5fb      	bpl.n	8003d44 <_printf_i+0x1c0>
 8003d4c:	8019      	strh	r1, [r3, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	4615      	mov	r5, r2
 8003d54:	e7bc      	b.n	8003cd0 <_printf_i+0x14c>
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	2100      	movs	r1, #0
 8003d62:	4628      	mov	r0, r5
 8003d64:	f7fc fa34 	bl	80001d0 <memchr>
 8003d68:	b108      	cbz	r0, 8003d6e <_printf_i+0x1ea>
 8003d6a:	1b40      	subs	r0, r0, r5
 8003d6c:	6060      	str	r0, [r4, #4]
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	2300      	movs	r3, #0
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d78:	e7aa      	b.n	8003cd0 <_printf_i+0x14c>
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4640      	mov	r0, r8
 8003d82:	47d0      	blx	sl
 8003d84:	3001      	adds	r0, #1
 8003d86:	d0ad      	beq.n	8003ce4 <_printf_i+0x160>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	079b      	lsls	r3, r3, #30
 8003d8c:	d413      	bmi.n	8003db6 <_printf_i+0x232>
 8003d8e:	68e0      	ldr	r0, [r4, #12]
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	4298      	cmp	r0, r3
 8003d94:	bfb8      	it	lt
 8003d96:	4618      	movlt	r0, r3
 8003d98:	e7a6      	b.n	8003ce8 <_printf_i+0x164>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4640      	mov	r0, r8
 8003da2:	47d0      	blx	sl
 8003da4:	3001      	adds	r0, #1
 8003da6:	d09d      	beq.n	8003ce4 <_printf_i+0x160>
 8003da8:	3501      	adds	r5, #1
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	9903      	ldr	r1, [sp, #12]
 8003dae:	1a5b      	subs	r3, r3, r1
 8003db0:	42ab      	cmp	r3, r5
 8003db2:	dcf2      	bgt.n	8003d9a <_printf_i+0x216>
 8003db4:	e7eb      	b.n	8003d8e <_printf_i+0x20a>
 8003db6:	2500      	movs	r5, #0
 8003db8:	f104 0619 	add.w	r6, r4, #25
 8003dbc:	e7f5      	b.n	8003daa <_printf_i+0x226>
 8003dbe:	bf00      	nop
 8003dc0:	080062b2 	.word	0x080062b2
 8003dc4:	080062c3 	.word	0x080062c3

08003dc8 <std>:
 8003dc8:	2300      	movs	r3, #0
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	4604      	mov	r4, r0
 8003dce:	e9c0 3300 	strd	r3, r3, [r0]
 8003dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dd6:	6083      	str	r3, [r0, #8]
 8003dd8:	8181      	strh	r1, [r0, #12]
 8003dda:	6643      	str	r3, [r0, #100]	; 0x64
 8003ddc:	81c2      	strh	r2, [r0, #14]
 8003dde:	6183      	str	r3, [r0, #24]
 8003de0:	4619      	mov	r1, r3
 8003de2:	2208      	movs	r2, #8
 8003de4:	305c      	adds	r0, #92	; 0x5c
 8003de6:	f000 f926 	bl	8004036 <memset>
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <std+0x58>)
 8003dec:	6263      	str	r3, [r4, #36]	; 0x24
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <std+0x5c>)
 8003df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <std+0x60>)
 8003df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <std+0x64>)
 8003df8:	6323      	str	r3, [r4, #48]	; 0x30
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <std+0x68>)
 8003dfc:	6224      	str	r4, [r4, #32]
 8003dfe:	429c      	cmp	r4, r3
 8003e00:	d006      	beq.n	8003e10 <std+0x48>
 8003e02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e06:	4294      	cmp	r4, r2
 8003e08:	d002      	beq.n	8003e10 <std+0x48>
 8003e0a:	33d0      	adds	r3, #208	; 0xd0
 8003e0c:	429c      	cmp	r4, r3
 8003e0e:	d105      	bne.n	8003e1c <std+0x54>
 8003e10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e18:	f000 b98a 	b.w	8004130 <__retarget_lock_init_recursive>
 8003e1c:	bd10      	pop	{r4, pc}
 8003e1e:	bf00      	nop
 8003e20:	08003fb1 	.word	0x08003fb1
 8003e24:	08003fd3 	.word	0x08003fd3
 8003e28:	0800400b 	.word	0x0800400b
 8003e2c:	0800402f 	.word	0x0800402f
 8003e30:	20000284 	.word	0x20000284

08003e34 <stdio_exit_handler>:
 8003e34:	4a02      	ldr	r2, [pc, #8]	; (8003e40 <stdio_exit_handler+0xc>)
 8003e36:	4903      	ldr	r1, [pc, #12]	; (8003e44 <stdio_exit_handler+0x10>)
 8003e38:	4803      	ldr	r0, [pc, #12]	; (8003e48 <stdio_exit_handler+0x14>)
 8003e3a:	f000 b869 	b.w	8003f10 <_fwalk_sglue>
 8003e3e:	bf00      	nop
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	08005d69 	.word	0x08005d69
 8003e48:	20000018 	.word	0x20000018

08003e4c <cleanup_stdio>:
 8003e4c:	6841      	ldr	r1, [r0, #4]
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <cleanup_stdio+0x34>)
 8003e50:	4299      	cmp	r1, r3
 8003e52:	b510      	push	{r4, lr}
 8003e54:	4604      	mov	r4, r0
 8003e56:	d001      	beq.n	8003e5c <cleanup_stdio+0x10>
 8003e58:	f001 ff86 	bl	8005d68 <_fflush_r>
 8003e5c:	68a1      	ldr	r1, [r4, #8]
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <cleanup_stdio+0x38>)
 8003e60:	4299      	cmp	r1, r3
 8003e62:	d002      	beq.n	8003e6a <cleanup_stdio+0x1e>
 8003e64:	4620      	mov	r0, r4
 8003e66:	f001 ff7f 	bl	8005d68 <_fflush_r>
 8003e6a:	68e1      	ldr	r1, [r4, #12]
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <cleanup_stdio+0x3c>)
 8003e6e:	4299      	cmp	r1, r3
 8003e70:	d004      	beq.n	8003e7c <cleanup_stdio+0x30>
 8003e72:	4620      	mov	r0, r4
 8003e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e78:	f001 bf76 	b.w	8005d68 <_fflush_r>
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000284 	.word	0x20000284
 8003e84:	200002ec 	.word	0x200002ec
 8003e88:	20000354 	.word	0x20000354

08003e8c <global_stdio_init.part.0>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <global_stdio_init.part.0+0x30>)
 8003e90:	4c0b      	ldr	r4, [pc, #44]	; (8003ec0 <global_stdio_init.part.0+0x34>)
 8003e92:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <global_stdio_init.part.0+0x38>)
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	4620      	mov	r0, r4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	f7ff ff94 	bl	8003dc8 <std>
 8003ea0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2109      	movs	r1, #9
 8003ea8:	f7ff ff8e 	bl	8003dc8 <std>
 8003eac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb6:	2112      	movs	r1, #18
 8003eb8:	f7ff bf86 	b.w	8003dc8 <std>
 8003ebc:	200003bc 	.word	0x200003bc
 8003ec0:	20000284 	.word	0x20000284
 8003ec4:	08003e35 	.word	0x08003e35

08003ec8 <__sfp_lock_acquire>:
 8003ec8:	4801      	ldr	r0, [pc, #4]	; (8003ed0 <__sfp_lock_acquire+0x8>)
 8003eca:	f000 b932 	b.w	8004132 <__retarget_lock_acquire_recursive>
 8003ece:	bf00      	nop
 8003ed0:	200003c5 	.word	0x200003c5

08003ed4 <__sfp_lock_release>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__sfp_lock_release+0x8>)
 8003ed6:	f000 b92d 	b.w	8004134 <__retarget_lock_release_recursive>
 8003eda:	bf00      	nop
 8003edc:	200003c5 	.word	0x200003c5

08003ee0 <__sinit>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	f7ff fff0 	bl	8003ec8 <__sfp_lock_acquire>
 8003ee8:	6a23      	ldr	r3, [r4, #32]
 8003eea:	b11b      	cbz	r3, 8003ef4 <__sinit+0x14>
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef0:	f7ff bff0 	b.w	8003ed4 <__sfp_lock_release>
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <__sinit+0x28>)
 8003ef6:	6223      	str	r3, [r4, #32]
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <__sinit+0x2c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f5      	bne.n	8003eec <__sinit+0xc>
 8003f00:	f7ff ffc4 	bl	8003e8c <global_stdio_init.part.0>
 8003f04:	e7f2      	b.n	8003eec <__sinit+0xc>
 8003f06:	bf00      	nop
 8003f08:	08003e4d 	.word	0x08003e4d
 8003f0c:	200003bc 	.word	0x200003bc

08003f10 <_fwalk_sglue>:
 8003f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f14:	4607      	mov	r7, r0
 8003f16:	4688      	mov	r8, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f20:	f1b9 0901 	subs.w	r9, r9, #1
 8003f24:	d505      	bpl.n	8003f32 <_fwalk_sglue+0x22>
 8003f26:	6824      	ldr	r4, [r4, #0]
 8003f28:	2c00      	cmp	r4, #0
 8003f2a:	d1f7      	bne.n	8003f1c <_fwalk_sglue+0xc>
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f32:	89ab      	ldrh	r3, [r5, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d907      	bls.n	8003f48 <_fwalk_sglue+0x38>
 8003f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	d003      	beq.n	8003f48 <_fwalk_sglue+0x38>
 8003f40:	4629      	mov	r1, r5
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c0      	blx	r8
 8003f46:	4306      	orrs	r6, r0
 8003f48:	3568      	adds	r5, #104	; 0x68
 8003f4a:	e7e9      	b.n	8003f20 <_fwalk_sglue+0x10>

08003f4c <iprintf>:
 8003f4c:	b40f      	push	{r0, r1, r2, r3}
 8003f4e:	b507      	push	{r0, r1, r2, lr}
 8003f50:	4906      	ldr	r1, [pc, #24]	; (8003f6c <iprintf+0x20>)
 8003f52:	ab04      	add	r3, sp, #16
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f5a:	6881      	ldr	r1, [r0, #8]
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	f001 fd63 	bl	8005a28 <_vfiprintf_r>
 8003f62:	b003      	add	sp, #12
 8003f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f68:	b004      	add	sp, #16
 8003f6a:	4770      	bx	lr
 8003f6c:	20000064 	.word	0x20000064

08003f70 <siprintf>:
 8003f70:	b40e      	push	{r1, r2, r3}
 8003f72:	b500      	push	{lr}
 8003f74:	b09c      	sub	sp, #112	; 0x70
 8003f76:	ab1d      	add	r3, sp, #116	; 0x74
 8003f78:	9002      	str	r0, [sp, #8]
 8003f7a:	9006      	str	r0, [sp, #24]
 8003f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f80:	4809      	ldr	r0, [pc, #36]	; (8003fa8 <siprintf+0x38>)
 8003f82:	9107      	str	r1, [sp, #28]
 8003f84:	9104      	str	r1, [sp, #16]
 8003f86:	4909      	ldr	r1, [pc, #36]	; (8003fac <siprintf+0x3c>)
 8003f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f8c:	9105      	str	r1, [sp, #20]
 8003f8e:	6800      	ldr	r0, [r0, #0]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	a902      	add	r1, sp, #8
 8003f94:	f001 fc20 	bl	80057d8 <_svfiprintf_r>
 8003f98:	9b02      	ldr	r3, [sp, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	b01c      	add	sp, #112	; 0x70
 8003fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa4:	b003      	add	sp, #12
 8003fa6:	4770      	bx	lr
 8003fa8:	20000064 	.word	0x20000064
 8003fac:	ffff0208 	.word	0xffff0208

08003fb0 <__sread>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb8:	f000 f86c 	bl	8004094 <_read_r>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	bfab      	itete	ge
 8003fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003fc4:	181b      	addge	r3, r3, r0
 8003fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fca:	bfac      	ite	ge
 8003fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fce:	81a3      	strhlt	r3, [r4, #12]
 8003fd0:	bd10      	pop	{r4, pc}

08003fd2 <__swrite>:
 8003fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	461f      	mov	r7, r3
 8003fd8:	898b      	ldrh	r3, [r1, #12]
 8003fda:	05db      	lsls	r3, r3, #23
 8003fdc:	4605      	mov	r5, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	d505      	bpl.n	8003ff0 <__swrite+0x1e>
 8003fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe8:	2302      	movs	r3, #2
 8003fea:	2200      	movs	r2, #0
 8003fec:	f000 f840 	bl	8004070 <_lseek_r>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	463b      	mov	r3, r7
 8004000:	4628      	mov	r0, r5
 8004002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004006:	f000 b857 	b.w	80040b8 <_write_r>

0800400a <__sseek>:
 800400a:	b510      	push	{r4, lr}
 800400c:	460c      	mov	r4, r1
 800400e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004012:	f000 f82d 	bl	8004070 <_lseek_r>
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	bf15      	itete	ne
 800401c:	6560      	strne	r0, [r4, #84]	; 0x54
 800401e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004026:	81a3      	strheq	r3, [r4, #12]
 8004028:	bf18      	it	ne
 800402a:	81a3      	strhne	r3, [r4, #12]
 800402c:	bd10      	pop	{r4, pc}

0800402e <__sclose>:
 800402e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004032:	f000 b80d 	b.w	8004050 <_close_r>

08004036 <memset>:
 8004036:	4402      	add	r2, r0
 8004038:	4603      	mov	r3, r0
 800403a:	4293      	cmp	r3, r2
 800403c:	d100      	bne.n	8004040 <memset+0xa>
 800403e:	4770      	bx	lr
 8004040:	f803 1b01 	strb.w	r1, [r3], #1
 8004044:	e7f9      	b.n	800403a <memset+0x4>
	...

08004048 <_localeconv_r>:
 8004048:	4800      	ldr	r0, [pc, #0]	; (800404c <_localeconv_r+0x4>)
 800404a:	4770      	bx	lr
 800404c:	20000158 	.word	0x20000158

08004050 <_close_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d06      	ldr	r5, [pc, #24]	; (800406c <_close_r+0x1c>)
 8004054:	2300      	movs	r3, #0
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	f7fd fa35 	bl	80014ca <_close>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_close_r+0x1a>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b103      	cbz	r3, 800406a <_close_r+0x1a>
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	200003c0 	.word	0x200003c0

08004070 <_lseek_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4d07      	ldr	r5, [pc, #28]	; (8004090 <_lseek_r+0x20>)
 8004074:	4604      	mov	r4, r0
 8004076:	4608      	mov	r0, r1
 8004078:	4611      	mov	r1, r2
 800407a:	2200      	movs	r2, #0
 800407c:	602a      	str	r2, [r5, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	f7fd fa4a 	bl	8001518 <_lseek>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_lseek_r+0x1e>
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	b103      	cbz	r3, 800408e <_lseek_r+0x1e>
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	200003c0 	.word	0x200003c0

08004094 <_read_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d07      	ldr	r5, [pc, #28]	; (80040b4 <_read_r+0x20>)
 8004098:	4604      	mov	r4, r0
 800409a:	4608      	mov	r0, r1
 800409c:	4611      	mov	r1, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	602a      	str	r2, [r5, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7fd f9d8 	bl	8001458 <_read>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_read_r+0x1e>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_read_r+0x1e>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	200003c0 	.word	0x200003c0

080040b8 <_write_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d07      	ldr	r5, [pc, #28]	; (80040d8 <_write_r+0x20>)
 80040bc:	4604      	mov	r4, r0
 80040be:	4608      	mov	r0, r1
 80040c0:	4611      	mov	r1, r2
 80040c2:	2200      	movs	r2, #0
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7fd f9e3 	bl	8001492 <_write>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_write_r+0x1e>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_write_r+0x1e>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	200003c0 	.word	0x200003c0

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000064 	.word	0x20000064

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4d0d      	ldr	r5, [pc, #52]	; (8004120 <__libc_init_array+0x38>)
 80040ec:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	2600      	movs	r6, #0
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	4d0b      	ldr	r5, [pc, #44]	; (8004128 <__libc_init_array+0x40>)
 80040fa:	4c0c      	ldr	r4, [pc, #48]	; (800412c <__libc_init_array+0x44>)
 80040fc:	f002 f896 	bl	800622c <_init>
 8004100:	1b64      	subs	r4, r4, r5
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	2600      	movs	r6, #0
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f855 3b04 	ldr.w	r3, [r5], #4
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	0800661c 	.word	0x0800661c
 8004124:	0800661c 	.word	0x0800661c
 8004128:	0800661c 	.word	0x0800661c
 800412c:	08006620 	.word	0x08006620

08004130 <__retarget_lock_init_recursive>:
 8004130:	4770      	bx	lr

08004132 <__retarget_lock_acquire_recursive>:
 8004132:	4770      	bx	lr

08004134 <__retarget_lock_release_recursive>:
 8004134:	4770      	bx	lr

08004136 <quorem>:
 8004136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	6903      	ldr	r3, [r0, #16]
 800413c:	690c      	ldr	r4, [r1, #16]
 800413e:	42a3      	cmp	r3, r4
 8004140:	4607      	mov	r7, r0
 8004142:	db7e      	blt.n	8004242 <quorem+0x10c>
 8004144:	3c01      	subs	r4, #1
 8004146:	f101 0814 	add.w	r8, r1, #20
 800414a:	f100 0514 	add.w	r5, r0, #20
 800414e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800415c:	3301      	adds	r3, #1
 800415e:	429a      	cmp	r2, r3
 8004160:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004168:	fbb2 f6f3 	udiv	r6, r2, r3
 800416c:	d331      	bcc.n	80041d2 <quorem+0x9c>
 800416e:	f04f 0e00 	mov.w	lr, #0
 8004172:	4640      	mov	r0, r8
 8004174:	46ac      	mov	ip, r5
 8004176:	46f2      	mov	sl, lr
 8004178:	f850 2b04 	ldr.w	r2, [r0], #4
 800417c:	b293      	uxth	r3, r2
 800417e:	fb06 e303 	mla	r3, r6, r3, lr
 8004182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004186:	0c1a      	lsrs	r2, r3, #16
 8004188:	b29b      	uxth	r3, r3
 800418a:	ebaa 0303 	sub.w	r3, sl, r3
 800418e:	f8dc a000 	ldr.w	sl, [ip]
 8004192:	fa13 f38a 	uxtah	r3, r3, sl
 8004196:	fb06 220e 	mla	r2, r6, lr, r2
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	9b00      	ldr	r3, [sp, #0]
 800419e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041a2:	b292      	uxth	r2, r2
 80041a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80041a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80041b0:	4581      	cmp	r9, r0
 80041b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041b6:	f84c 3b04 	str.w	r3, [ip], #4
 80041ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041be:	d2db      	bcs.n	8004178 <quorem+0x42>
 80041c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80041c4:	b92b      	cbnz	r3, 80041d2 <quorem+0x9c>
 80041c6:	9b01      	ldr	r3, [sp, #4]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	429d      	cmp	r5, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	d32c      	bcc.n	800422a <quorem+0xf4>
 80041d0:	613c      	str	r4, [r7, #16]
 80041d2:	4638      	mov	r0, r7
 80041d4:	f001 f9a6 	bl	8005524 <__mcmp>
 80041d8:	2800      	cmp	r0, #0
 80041da:	db22      	blt.n	8004222 <quorem+0xec>
 80041dc:	3601      	adds	r6, #1
 80041de:	4629      	mov	r1, r5
 80041e0:	2000      	movs	r0, #0
 80041e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80041e6:	f8d1 c000 	ldr.w	ip, [r1]
 80041ea:	b293      	uxth	r3, r2
 80041ec:	1ac3      	subs	r3, r0, r3
 80041ee:	0c12      	lsrs	r2, r2, #16
 80041f0:	fa13 f38c 	uxtah	r3, r3, ip
 80041f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80041f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004202:	45c1      	cmp	r9, r8
 8004204:	f841 3b04 	str.w	r3, [r1], #4
 8004208:	ea4f 4022 	mov.w	r0, r2, asr #16
 800420c:	d2e9      	bcs.n	80041e2 <quorem+0xac>
 800420e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004216:	b922      	cbnz	r2, 8004222 <quorem+0xec>
 8004218:	3b04      	subs	r3, #4
 800421a:	429d      	cmp	r5, r3
 800421c:	461a      	mov	r2, r3
 800421e:	d30a      	bcc.n	8004236 <quorem+0x100>
 8004220:	613c      	str	r4, [r7, #16]
 8004222:	4630      	mov	r0, r6
 8004224:	b003      	add	sp, #12
 8004226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	3b04      	subs	r3, #4
 800422e:	2a00      	cmp	r2, #0
 8004230:	d1ce      	bne.n	80041d0 <quorem+0x9a>
 8004232:	3c01      	subs	r4, #1
 8004234:	e7c9      	b.n	80041ca <quorem+0x94>
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	3b04      	subs	r3, #4
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1f0      	bne.n	8004220 <quorem+0xea>
 800423e:	3c01      	subs	r4, #1
 8004240:	e7eb      	b.n	800421a <quorem+0xe4>
 8004242:	2000      	movs	r0, #0
 8004244:	e7ee      	b.n	8004224 <quorem+0xee>
	...

08004248 <_dtoa_r>:
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	ed2d 8b04 	vpush	{d8-d9}
 8004250:	69c5      	ldr	r5, [r0, #28]
 8004252:	b093      	sub	sp, #76	; 0x4c
 8004254:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004258:	ec57 6b10 	vmov	r6, r7, d0
 800425c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004260:	9107      	str	r1, [sp, #28]
 8004262:	4604      	mov	r4, r0
 8004264:	920a      	str	r2, [sp, #40]	; 0x28
 8004266:	930d      	str	r3, [sp, #52]	; 0x34
 8004268:	b975      	cbnz	r5, 8004288 <_dtoa_r+0x40>
 800426a:	2010      	movs	r0, #16
 800426c:	f000 fe2a 	bl	8004ec4 <malloc>
 8004270:	4602      	mov	r2, r0
 8004272:	61e0      	str	r0, [r4, #28]
 8004274:	b920      	cbnz	r0, 8004280 <_dtoa_r+0x38>
 8004276:	4bae      	ldr	r3, [pc, #696]	; (8004530 <_dtoa_r+0x2e8>)
 8004278:	21ef      	movs	r1, #239	; 0xef
 800427a:	48ae      	ldr	r0, [pc, #696]	; (8004534 <_dtoa_r+0x2ec>)
 800427c:	f001 fe6a 	bl	8005f54 <__assert_func>
 8004280:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004284:	6005      	str	r5, [r0, #0]
 8004286:	60c5      	str	r5, [r0, #12]
 8004288:	69e3      	ldr	r3, [r4, #28]
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	b151      	cbz	r1, 80042a4 <_dtoa_r+0x5c>
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	604a      	str	r2, [r1, #4]
 8004292:	2301      	movs	r3, #1
 8004294:	4093      	lsls	r3, r2
 8004296:	608b      	str	r3, [r1, #8]
 8004298:	4620      	mov	r0, r4
 800429a:	f000 ff07 	bl	80050ac <_Bfree>
 800429e:	69e3      	ldr	r3, [r4, #28]
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	1e3b      	subs	r3, r7, #0
 80042a6:	bfbb      	ittet	lt
 80042a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	9303      	strlt	r3, [sp, #12]
 80042ae:	2300      	movge	r3, #0
 80042b0:	2201      	movlt	r2, #1
 80042b2:	bfac      	ite	ge
 80042b4:	f8c8 3000 	strge.w	r3, [r8]
 80042b8:	f8c8 2000 	strlt.w	r2, [r8]
 80042bc:	4b9e      	ldr	r3, [pc, #632]	; (8004538 <_dtoa_r+0x2f0>)
 80042be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80042c2:	ea33 0308 	bics.w	r3, r3, r8
 80042c6:	d11b      	bne.n	8004300 <_dtoa_r+0xb8>
 80042c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80042d4:	4333      	orrs	r3, r6
 80042d6:	f000 8593 	beq.w	8004e00 <_dtoa_r+0xbb8>
 80042da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042dc:	b963      	cbnz	r3, 80042f8 <_dtoa_r+0xb0>
 80042de:	4b97      	ldr	r3, [pc, #604]	; (800453c <_dtoa_r+0x2f4>)
 80042e0:	e027      	b.n	8004332 <_dtoa_r+0xea>
 80042e2:	4b97      	ldr	r3, [pc, #604]	; (8004540 <_dtoa_r+0x2f8>)
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	9800      	ldr	r0, [sp, #0]
 80042ee:	b013      	add	sp, #76	; 0x4c
 80042f0:	ecbd 8b04 	vpop	{d8-d9}
 80042f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f8:	4b90      	ldr	r3, [pc, #576]	; (800453c <_dtoa_r+0x2f4>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	3303      	adds	r3, #3
 80042fe:	e7f3      	b.n	80042e8 <_dtoa_r+0xa0>
 8004300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	ec51 0b17 	vmov	r0, r1, d7
 800430a:	eeb0 8a47 	vmov.f32	s16, s14
 800430e:	eef0 8a67 	vmov.f32	s17, s15
 8004312:	2300      	movs	r3, #0
 8004314:	f7fc fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004318:	4681      	mov	r9, r0
 800431a:	b160      	cbz	r0, 8004336 <_dtoa_r+0xee>
 800431c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800431e:	2301      	movs	r3, #1
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8568 	beq.w	8004dfa <_dtoa_r+0xbb2>
 800432a:	4b86      	ldr	r3, [pc, #536]	; (8004544 <_dtoa_r+0x2fc>)
 800432c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	3b01      	subs	r3, #1
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	e7da      	b.n	80042ec <_dtoa_r+0xa4>
 8004336:	aa10      	add	r2, sp, #64	; 0x40
 8004338:	a911      	add	r1, sp, #68	; 0x44
 800433a:	4620      	mov	r0, r4
 800433c:	eeb0 0a48 	vmov.f32	s0, s16
 8004340:	eef0 0a68 	vmov.f32	s1, s17
 8004344:	f001 f994 	bl	8005670 <__d2b>
 8004348:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800434c:	4682      	mov	sl, r0
 800434e:	2d00      	cmp	r5, #0
 8004350:	d07f      	beq.n	8004452 <_dtoa_r+0x20a>
 8004352:	ee18 3a90 	vmov	r3, s17
 8004356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800435e:	ec51 0b18 	vmov	r0, r1, d8
 8004362:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800436a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800436e:	4619      	mov	r1, r3
 8004370:	2200      	movs	r2, #0
 8004372:	4b75      	ldr	r3, [pc, #468]	; (8004548 <_dtoa_r+0x300>)
 8004374:	f7fb ff88 	bl	8000288 <__aeabi_dsub>
 8004378:	a367      	add	r3, pc, #412	; (adr r3, 8004518 <_dtoa_r+0x2d0>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f7fc f93b 	bl	80005f8 <__aeabi_dmul>
 8004382:	a367      	add	r3, pc, #412	; (adr r3, 8004520 <_dtoa_r+0x2d8>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fb ff80 	bl	800028c <__adddf3>
 800438c:	4606      	mov	r6, r0
 800438e:	4628      	mov	r0, r5
 8004390:	460f      	mov	r7, r1
 8004392:	f7fc f8c7 	bl	8000524 <__aeabi_i2d>
 8004396:	a364      	add	r3, pc, #400	; (adr r3, 8004528 <_dtoa_r+0x2e0>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc f92c 	bl	80005f8 <__aeabi_dmul>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4630      	mov	r0, r6
 80043a6:	4639      	mov	r1, r7
 80043a8:	f7fb ff70 	bl	800028c <__adddf3>
 80043ac:	4606      	mov	r6, r0
 80043ae:	460f      	mov	r7, r1
 80043b0:	f7fc fbd2 	bl	8000b58 <__aeabi_d2iz>
 80043b4:	2200      	movs	r2, #0
 80043b6:	4683      	mov	fp, r0
 80043b8:	2300      	movs	r3, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	4639      	mov	r1, r7
 80043be:	f7fc fb8d 	bl	8000adc <__aeabi_dcmplt>
 80043c2:	b148      	cbz	r0, 80043d8 <_dtoa_r+0x190>
 80043c4:	4658      	mov	r0, fp
 80043c6:	f7fc f8ad 	bl	8000524 <__aeabi_i2d>
 80043ca:	4632      	mov	r2, r6
 80043cc:	463b      	mov	r3, r7
 80043ce:	f7fc fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80043d2:	b908      	cbnz	r0, 80043d8 <_dtoa_r+0x190>
 80043d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043d8:	f1bb 0f16 	cmp.w	fp, #22
 80043dc:	d857      	bhi.n	800448e <_dtoa_r+0x246>
 80043de:	4b5b      	ldr	r3, [pc, #364]	; (800454c <_dtoa_r+0x304>)
 80043e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	ec51 0b18 	vmov	r0, r1, d8
 80043ec:	f7fc fb76 	bl	8000adc <__aeabi_dcmplt>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d04e      	beq.n	8004492 <_dtoa_r+0x24a>
 80043f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043f8:	2300      	movs	r3, #0
 80043fa:	930c      	str	r3, [sp, #48]	; 0x30
 80043fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043fe:	1b5b      	subs	r3, r3, r5
 8004400:	1e5a      	subs	r2, r3, #1
 8004402:	bf45      	ittet	mi
 8004404:	f1c3 0301 	rsbmi	r3, r3, #1
 8004408:	9305      	strmi	r3, [sp, #20]
 800440a:	2300      	movpl	r3, #0
 800440c:	2300      	movmi	r3, #0
 800440e:	9206      	str	r2, [sp, #24]
 8004410:	bf54      	ite	pl
 8004412:	9305      	strpl	r3, [sp, #20]
 8004414:	9306      	strmi	r3, [sp, #24]
 8004416:	f1bb 0f00 	cmp.w	fp, #0
 800441a:	db3c      	blt.n	8004496 <_dtoa_r+0x24e>
 800441c:	9b06      	ldr	r3, [sp, #24]
 800441e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004422:	445b      	add	r3, fp
 8004424:	9306      	str	r3, [sp, #24]
 8004426:	2300      	movs	r3, #0
 8004428:	9308      	str	r3, [sp, #32]
 800442a:	9b07      	ldr	r3, [sp, #28]
 800442c:	2b09      	cmp	r3, #9
 800442e:	d868      	bhi.n	8004502 <_dtoa_r+0x2ba>
 8004430:	2b05      	cmp	r3, #5
 8004432:	bfc4      	itt	gt
 8004434:	3b04      	subgt	r3, #4
 8004436:	9307      	strgt	r3, [sp, #28]
 8004438:	9b07      	ldr	r3, [sp, #28]
 800443a:	f1a3 0302 	sub.w	r3, r3, #2
 800443e:	bfcc      	ite	gt
 8004440:	2500      	movgt	r5, #0
 8004442:	2501      	movle	r5, #1
 8004444:	2b03      	cmp	r3, #3
 8004446:	f200 8085 	bhi.w	8004554 <_dtoa_r+0x30c>
 800444a:	e8df f003 	tbb	[pc, r3]
 800444e:	3b2e      	.short	0x3b2e
 8004450:	5839      	.short	0x5839
 8004452:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004456:	441d      	add	r5, r3
 8004458:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800445c:	2b20      	cmp	r3, #32
 800445e:	bfc1      	itttt	gt
 8004460:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004464:	fa08 f803 	lslgt.w	r8, r8, r3
 8004468:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800446c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004470:	bfd6      	itet	le
 8004472:	f1c3 0320 	rsble	r3, r3, #32
 8004476:	ea48 0003 	orrgt.w	r0, r8, r3
 800447a:	fa06 f003 	lslle.w	r0, r6, r3
 800447e:	f7fc f841 	bl	8000504 <__aeabi_ui2d>
 8004482:	2201      	movs	r2, #1
 8004484:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004488:	3d01      	subs	r5, #1
 800448a:	920e      	str	r2, [sp, #56]	; 0x38
 800448c:	e76f      	b.n	800436e <_dtoa_r+0x126>
 800448e:	2301      	movs	r3, #1
 8004490:	e7b3      	b.n	80043fa <_dtoa_r+0x1b2>
 8004492:	900c      	str	r0, [sp, #48]	; 0x30
 8004494:	e7b2      	b.n	80043fc <_dtoa_r+0x1b4>
 8004496:	9b05      	ldr	r3, [sp, #20]
 8004498:	eba3 030b 	sub.w	r3, r3, fp
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	f1cb 0300 	rsb	r3, fp, #0
 80044a2:	9308      	str	r3, [sp, #32]
 80044a4:	2300      	movs	r3, #0
 80044a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a8:	e7bf      	b.n	800442a <_dtoa_r+0x1e2>
 80044aa:	2300      	movs	r3, #0
 80044ac:	9309      	str	r3, [sp, #36]	; 0x24
 80044ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dc52      	bgt.n	800455a <_dtoa_r+0x312>
 80044b4:	2301      	movs	r3, #1
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	461a      	mov	r2, r3
 80044bc:	920a      	str	r2, [sp, #40]	; 0x28
 80044be:	e00b      	b.n	80044d8 <_dtoa_r+0x290>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e7f3      	b.n	80044ac <_dtoa_r+0x264>
 80044c4:	2300      	movs	r3, #0
 80044c6:	9309      	str	r3, [sp, #36]	; 0x24
 80044c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ca:	445b      	add	r3, fp
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	3301      	adds	r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	bfb8      	it	lt
 80044d6:	2301      	movlt	r3, #1
 80044d8:	69e0      	ldr	r0, [r4, #28]
 80044da:	2100      	movs	r1, #0
 80044dc:	2204      	movs	r2, #4
 80044de:	f102 0614 	add.w	r6, r2, #20
 80044e2:	429e      	cmp	r6, r3
 80044e4:	d93d      	bls.n	8004562 <_dtoa_r+0x31a>
 80044e6:	6041      	str	r1, [r0, #4]
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fd9f 	bl	800502c <_Balloc>
 80044ee:	9000      	str	r0, [sp, #0]
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d139      	bne.n	8004568 <_dtoa_r+0x320>
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <_dtoa_r+0x308>)
 80044f6:	4602      	mov	r2, r0
 80044f8:	f240 11af 	movw	r1, #431	; 0x1af
 80044fc:	e6bd      	b.n	800427a <_dtoa_r+0x32>
 80044fe:	2301      	movs	r3, #1
 8004500:	e7e1      	b.n	80044c6 <_dtoa_r+0x27e>
 8004502:	2501      	movs	r5, #1
 8004504:	2300      	movs	r3, #0
 8004506:	9307      	str	r3, [sp, #28]
 8004508:	9509      	str	r5, [sp, #36]	; 0x24
 800450a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	9304      	str	r3, [sp, #16]
 8004512:	2200      	movs	r2, #0
 8004514:	2312      	movs	r3, #18
 8004516:	e7d1      	b.n	80044bc <_dtoa_r+0x274>
 8004518:	636f4361 	.word	0x636f4361
 800451c:	3fd287a7 	.word	0x3fd287a7
 8004520:	8b60c8b3 	.word	0x8b60c8b3
 8004524:	3fc68a28 	.word	0x3fc68a28
 8004528:	509f79fb 	.word	0x509f79fb
 800452c:	3fd34413 	.word	0x3fd34413
 8004530:	080062e1 	.word	0x080062e1
 8004534:	080062f8 	.word	0x080062f8
 8004538:	7ff00000 	.word	0x7ff00000
 800453c:	080062dd 	.word	0x080062dd
 8004540:	080062d4 	.word	0x080062d4
 8004544:	080062b1 	.word	0x080062b1
 8004548:	3ff80000 	.word	0x3ff80000
 800454c:	080063e8 	.word	0x080063e8
 8004550:	08006350 	.word	0x08006350
 8004554:	2301      	movs	r3, #1
 8004556:	9309      	str	r3, [sp, #36]	; 0x24
 8004558:	e7d7      	b.n	800450a <_dtoa_r+0x2c2>
 800455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	e7ba      	b.n	80044d8 <_dtoa_r+0x290>
 8004562:	3101      	adds	r1, #1
 8004564:	0052      	lsls	r2, r2, #1
 8004566:	e7ba      	b.n	80044de <_dtoa_r+0x296>
 8004568:	69e3      	ldr	r3, [r4, #28]
 800456a:	9a00      	ldr	r2, [sp, #0]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	9b04      	ldr	r3, [sp, #16]
 8004570:	2b0e      	cmp	r3, #14
 8004572:	f200 80a8 	bhi.w	80046c6 <_dtoa_r+0x47e>
 8004576:	2d00      	cmp	r5, #0
 8004578:	f000 80a5 	beq.w	80046c6 <_dtoa_r+0x47e>
 800457c:	f1bb 0f00 	cmp.w	fp, #0
 8004580:	dd38      	ble.n	80045f4 <_dtoa_r+0x3ac>
 8004582:	4bc0      	ldr	r3, [pc, #768]	; (8004884 <_dtoa_r+0x63c>)
 8004584:	f00b 020f 	and.w	r2, fp, #15
 8004588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800458c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004590:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004594:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004598:	d019      	beq.n	80045ce <_dtoa_r+0x386>
 800459a:	4bbb      	ldr	r3, [pc, #748]	; (8004888 <_dtoa_r+0x640>)
 800459c:	ec51 0b18 	vmov	r0, r1, d8
 80045a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045a4:	f7fc f952 	bl	800084c <__aeabi_ddiv>
 80045a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ac:	f008 080f 	and.w	r8, r8, #15
 80045b0:	2503      	movs	r5, #3
 80045b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004888 <_dtoa_r+0x640>
 80045b6:	f1b8 0f00 	cmp.w	r8, #0
 80045ba:	d10a      	bne.n	80045d2 <_dtoa_r+0x38a>
 80045bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c0:	4632      	mov	r2, r6
 80045c2:	463b      	mov	r3, r7
 80045c4:	f7fc f942 	bl	800084c <__aeabi_ddiv>
 80045c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045cc:	e02b      	b.n	8004626 <_dtoa_r+0x3de>
 80045ce:	2502      	movs	r5, #2
 80045d0:	e7ef      	b.n	80045b2 <_dtoa_r+0x36a>
 80045d2:	f018 0f01 	tst.w	r8, #1
 80045d6:	d008      	beq.n	80045ea <_dtoa_r+0x3a2>
 80045d8:	4630      	mov	r0, r6
 80045da:	4639      	mov	r1, r7
 80045dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80045e0:	f7fc f80a 	bl	80005f8 <__aeabi_dmul>
 80045e4:	3501      	adds	r5, #1
 80045e6:	4606      	mov	r6, r0
 80045e8:	460f      	mov	r7, r1
 80045ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80045ee:	f109 0908 	add.w	r9, r9, #8
 80045f2:	e7e0      	b.n	80045b6 <_dtoa_r+0x36e>
 80045f4:	f000 809f 	beq.w	8004736 <_dtoa_r+0x4ee>
 80045f8:	f1cb 0600 	rsb	r6, fp, #0
 80045fc:	4ba1      	ldr	r3, [pc, #644]	; (8004884 <_dtoa_r+0x63c>)
 80045fe:	4fa2      	ldr	r7, [pc, #648]	; (8004888 <_dtoa_r+0x640>)
 8004600:	f006 020f 	and.w	r2, r6, #15
 8004604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	ec51 0b18 	vmov	r0, r1, d8
 8004610:	f7fb fff2 	bl	80005f8 <__aeabi_dmul>
 8004614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004618:	1136      	asrs	r6, r6, #4
 800461a:	2300      	movs	r3, #0
 800461c:	2502      	movs	r5, #2
 800461e:	2e00      	cmp	r6, #0
 8004620:	d17e      	bne.n	8004720 <_dtoa_r+0x4d8>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1d0      	bne.n	80045c8 <_dtoa_r+0x380>
 8004626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004628:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8084 	beq.w	800473a <_dtoa_r+0x4f2>
 8004632:	4b96      	ldr	r3, [pc, #600]	; (800488c <_dtoa_r+0x644>)
 8004634:	2200      	movs	r2, #0
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	f7fc fa4f 	bl	8000adc <__aeabi_dcmplt>
 800463e:	2800      	cmp	r0, #0
 8004640:	d07b      	beq.n	800473a <_dtoa_r+0x4f2>
 8004642:	9b04      	ldr	r3, [sp, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d078      	beq.n	800473a <_dtoa_r+0x4f2>
 8004648:	9b01      	ldr	r3, [sp, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	dd39      	ble.n	80046c2 <_dtoa_r+0x47a>
 800464e:	4b90      	ldr	r3, [pc, #576]	; (8004890 <_dtoa_r+0x648>)
 8004650:	2200      	movs	r2, #0
 8004652:	4640      	mov	r0, r8
 8004654:	4649      	mov	r1, r9
 8004656:	f7fb ffcf 	bl	80005f8 <__aeabi_dmul>
 800465a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800465e:	9e01      	ldr	r6, [sp, #4]
 8004660:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004664:	3501      	adds	r5, #1
 8004666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800466a:	4628      	mov	r0, r5
 800466c:	f7fb ff5a 	bl	8000524 <__aeabi_i2d>
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	f7fb ffc0 	bl	80005f8 <__aeabi_dmul>
 8004678:	4b86      	ldr	r3, [pc, #536]	; (8004894 <_dtoa_r+0x64c>)
 800467a:	2200      	movs	r2, #0
 800467c:	f7fb fe06 	bl	800028c <__adddf3>
 8004680:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004688:	9303      	str	r3, [sp, #12]
 800468a:	2e00      	cmp	r6, #0
 800468c:	d158      	bne.n	8004740 <_dtoa_r+0x4f8>
 800468e:	4b82      	ldr	r3, [pc, #520]	; (8004898 <_dtoa_r+0x650>)
 8004690:	2200      	movs	r2, #0
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	f7fb fdf7 	bl	8000288 <__aeabi_dsub>
 800469a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800469e:	4680      	mov	r8, r0
 80046a0:	4689      	mov	r9, r1
 80046a2:	f7fc fa39 	bl	8000b18 <__aeabi_dcmpgt>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f040 8296 	bne.w	8004bd8 <_dtoa_r+0x990>
 80046ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80046b0:	4640      	mov	r0, r8
 80046b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fc fa10 	bl	8000adc <__aeabi_dcmplt>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 8289 	bne.w	8004bd4 <_dtoa_r+0x98c>
 80046c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80046c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f2c0 814e 	blt.w	800496a <_dtoa_r+0x722>
 80046ce:	f1bb 0f0e 	cmp.w	fp, #14
 80046d2:	f300 814a 	bgt.w	800496a <_dtoa_r+0x722>
 80046d6:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <_dtoa_r+0x63c>)
 80046d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f280 80dc 	bge.w	80048a0 <_dtoa_r+0x658>
 80046e8:	9b04      	ldr	r3, [sp, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f300 80d8 	bgt.w	80048a0 <_dtoa_r+0x658>
 80046f0:	f040 826f 	bne.w	8004bd2 <_dtoa_r+0x98a>
 80046f4:	4b68      	ldr	r3, [pc, #416]	; (8004898 <_dtoa_r+0x650>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	4640      	mov	r0, r8
 80046fa:	4649      	mov	r1, r9
 80046fc:	f7fb ff7c 	bl	80005f8 <__aeabi_dmul>
 8004700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004704:	f7fc f9fe 	bl	8000b04 <__aeabi_dcmpge>
 8004708:	9e04      	ldr	r6, [sp, #16]
 800470a:	4637      	mov	r7, r6
 800470c:	2800      	cmp	r0, #0
 800470e:	f040 8245 	bne.w	8004b9c <_dtoa_r+0x954>
 8004712:	9d00      	ldr	r5, [sp, #0]
 8004714:	2331      	movs	r3, #49	; 0x31
 8004716:	f805 3b01 	strb.w	r3, [r5], #1
 800471a:	f10b 0b01 	add.w	fp, fp, #1
 800471e:	e241      	b.n	8004ba4 <_dtoa_r+0x95c>
 8004720:	07f2      	lsls	r2, r6, #31
 8004722:	d505      	bpl.n	8004730 <_dtoa_r+0x4e8>
 8004724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004728:	f7fb ff66 	bl	80005f8 <__aeabi_dmul>
 800472c:	3501      	adds	r5, #1
 800472e:	2301      	movs	r3, #1
 8004730:	1076      	asrs	r6, r6, #1
 8004732:	3708      	adds	r7, #8
 8004734:	e773      	b.n	800461e <_dtoa_r+0x3d6>
 8004736:	2502      	movs	r5, #2
 8004738:	e775      	b.n	8004626 <_dtoa_r+0x3de>
 800473a:	9e04      	ldr	r6, [sp, #16]
 800473c:	465f      	mov	r7, fp
 800473e:	e792      	b.n	8004666 <_dtoa_r+0x41e>
 8004740:	9900      	ldr	r1, [sp, #0]
 8004742:	4b50      	ldr	r3, [pc, #320]	; (8004884 <_dtoa_r+0x63c>)
 8004744:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004748:	4431      	add	r1, r6
 800474a:	9102      	str	r1, [sp, #8]
 800474c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800474e:	eeb0 9a47 	vmov.f32	s18, s14
 8004752:	eef0 9a67 	vmov.f32	s19, s15
 8004756:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800475a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800475e:	2900      	cmp	r1, #0
 8004760:	d044      	beq.n	80047ec <_dtoa_r+0x5a4>
 8004762:	494e      	ldr	r1, [pc, #312]	; (800489c <_dtoa_r+0x654>)
 8004764:	2000      	movs	r0, #0
 8004766:	f7fc f871 	bl	800084c <__aeabi_ddiv>
 800476a:	ec53 2b19 	vmov	r2, r3, d9
 800476e:	f7fb fd8b 	bl	8000288 <__aeabi_dsub>
 8004772:	9d00      	ldr	r5, [sp, #0]
 8004774:	ec41 0b19 	vmov	d9, r0, r1
 8004778:	4649      	mov	r1, r9
 800477a:	4640      	mov	r0, r8
 800477c:	f7fc f9ec 	bl	8000b58 <__aeabi_d2iz>
 8004780:	4606      	mov	r6, r0
 8004782:	f7fb fecf 	bl	8000524 <__aeabi_i2d>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4640      	mov	r0, r8
 800478c:	4649      	mov	r1, r9
 800478e:	f7fb fd7b 	bl	8000288 <__aeabi_dsub>
 8004792:	3630      	adds	r6, #48	; 0x30
 8004794:	f805 6b01 	strb.w	r6, [r5], #1
 8004798:	ec53 2b19 	vmov	r2, r3, d9
 800479c:	4680      	mov	r8, r0
 800479e:	4689      	mov	r9, r1
 80047a0:	f7fc f99c 	bl	8000adc <__aeabi_dcmplt>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d164      	bne.n	8004872 <_dtoa_r+0x62a>
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	4937      	ldr	r1, [pc, #220]	; (800488c <_dtoa_r+0x644>)
 80047ae:	2000      	movs	r0, #0
 80047b0:	f7fb fd6a 	bl	8000288 <__aeabi_dsub>
 80047b4:	ec53 2b19 	vmov	r2, r3, d9
 80047b8:	f7fc f990 	bl	8000adc <__aeabi_dcmplt>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f040 80b6 	bne.w	800492e <_dtoa_r+0x6e6>
 80047c2:	9b02      	ldr	r3, [sp, #8]
 80047c4:	429d      	cmp	r5, r3
 80047c6:	f43f af7c 	beq.w	80046c2 <_dtoa_r+0x47a>
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <_dtoa_r+0x648>)
 80047cc:	ec51 0b19 	vmov	r0, r1, d9
 80047d0:	2200      	movs	r2, #0
 80047d2:	f7fb ff11 	bl	80005f8 <__aeabi_dmul>
 80047d6:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <_dtoa_r+0x648>)
 80047d8:	ec41 0b19 	vmov	d9, r0, r1
 80047dc:	2200      	movs	r2, #0
 80047de:	4640      	mov	r0, r8
 80047e0:	4649      	mov	r1, r9
 80047e2:	f7fb ff09 	bl	80005f8 <__aeabi_dmul>
 80047e6:	4680      	mov	r8, r0
 80047e8:	4689      	mov	r9, r1
 80047ea:	e7c5      	b.n	8004778 <_dtoa_r+0x530>
 80047ec:	ec51 0b17 	vmov	r0, r1, d7
 80047f0:	f7fb ff02 	bl	80005f8 <__aeabi_dmul>
 80047f4:	9b02      	ldr	r3, [sp, #8]
 80047f6:	9d00      	ldr	r5, [sp, #0]
 80047f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80047fa:	ec41 0b19 	vmov	d9, r0, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	f7fc f9a9 	bl	8000b58 <__aeabi_d2iz>
 8004806:	4606      	mov	r6, r0
 8004808:	f7fb fe8c 	bl	8000524 <__aeabi_i2d>
 800480c:	3630      	adds	r6, #48	; 0x30
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4640      	mov	r0, r8
 8004814:	4649      	mov	r1, r9
 8004816:	f7fb fd37 	bl	8000288 <__aeabi_dsub>
 800481a:	f805 6b01 	strb.w	r6, [r5], #1
 800481e:	9b02      	ldr	r3, [sp, #8]
 8004820:	429d      	cmp	r5, r3
 8004822:	4680      	mov	r8, r0
 8004824:	4689      	mov	r9, r1
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	d124      	bne.n	8004876 <_dtoa_r+0x62e>
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <_dtoa_r+0x654>)
 800482e:	ec51 0b19 	vmov	r0, r1, d9
 8004832:	f7fb fd2b 	bl	800028c <__adddf3>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4640      	mov	r0, r8
 800483c:	4649      	mov	r1, r9
 800483e:	f7fc f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8004842:	2800      	cmp	r0, #0
 8004844:	d173      	bne.n	800492e <_dtoa_r+0x6e6>
 8004846:	ec53 2b19 	vmov	r2, r3, d9
 800484a:	4914      	ldr	r1, [pc, #80]	; (800489c <_dtoa_r+0x654>)
 800484c:	2000      	movs	r0, #0
 800484e:	f7fb fd1b 	bl	8000288 <__aeabi_dsub>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4640      	mov	r0, r8
 8004858:	4649      	mov	r1, r9
 800485a:	f7fc f93f 	bl	8000adc <__aeabi_dcmplt>
 800485e:	2800      	cmp	r0, #0
 8004860:	f43f af2f 	beq.w	80046c2 <_dtoa_r+0x47a>
 8004864:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004866:	1e6b      	subs	r3, r5, #1
 8004868:	930f      	str	r3, [sp, #60]	; 0x3c
 800486a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800486e:	2b30      	cmp	r3, #48	; 0x30
 8004870:	d0f8      	beq.n	8004864 <_dtoa_r+0x61c>
 8004872:	46bb      	mov	fp, r7
 8004874:	e04a      	b.n	800490c <_dtoa_r+0x6c4>
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <_dtoa_r+0x648>)
 8004878:	f7fb febe 	bl	80005f8 <__aeabi_dmul>
 800487c:	4680      	mov	r8, r0
 800487e:	4689      	mov	r9, r1
 8004880:	e7bd      	b.n	80047fe <_dtoa_r+0x5b6>
 8004882:	bf00      	nop
 8004884:	080063e8 	.word	0x080063e8
 8004888:	080063c0 	.word	0x080063c0
 800488c:	3ff00000 	.word	0x3ff00000
 8004890:	40240000 	.word	0x40240000
 8004894:	401c0000 	.word	0x401c0000
 8004898:	40140000 	.word	0x40140000
 800489c:	3fe00000 	.word	0x3fe00000
 80048a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048a4:	9d00      	ldr	r5, [sp, #0]
 80048a6:	4642      	mov	r2, r8
 80048a8:	464b      	mov	r3, r9
 80048aa:	4630      	mov	r0, r6
 80048ac:	4639      	mov	r1, r7
 80048ae:	f7fb ffcd 	bl	800084c <__aeabi_ddiv>
 80048b2:	f7fc f951 	bl	8000b58 <__aeabi_d2iz>
 80048b6:	9001      	str	r0, [sp, #4]
 80048b8:	f7fb fe34 	bl	8000524 <__aeabi_i2d>
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	f7fb fe9a 	bl	80005f8 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	9e01      	ldr	r6, [sp, #4]
 80048d2:	9f04      	ldr	r7, [sp, #16]
 80048d4:	3630      	adds	r6, #48	; 0x30
 80048d6:	f805 6b01 	strb.w	r6, [r5], #1
 80048da:	9e00      	ldr	r6, [sp, #0]
 80048dc:	1bae      	subs	r6, r5, r6
 80048de:	42b7      	cmp	r7, r6
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	d134      	bne.n	8004950 <_dtoa_r+0x708>
 80048e6:	f7fb fcd1 	bl	800028c <__adddf3>
 80048ea:	4642      	mov	r2, r8
 80048ec:	464b      	mov	r3, r9
 80048ee:	4606      	mov	r6, r0
 80048f0:	460f      	mov	r7, r1
 80048f2:	f7fc f911 	bl	8000b18 <__aeabi_dcmpgt>
 80048f6:	b9c8      	cbnz	r0, 800492c <_dtoa_r+0x6e4>
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	4630      	mov	r0, r6
 80048fe:	4639      	mov	r1, r7
 8004900:	f7fc f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004904:	b110      	cbz	r0, 800490c <_dtoa_r+0x6c4>
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d40f      	bmi.n	800492c <_dtoa_r+0x6e4>
 800490c:	4651      	mov	r1, sl
 800490e:	4620      	mov	r0, r4
 8004910:	f000 fbcc 	bl	80050ac <_Bfree>
 8004914:	2300      	movs	r3, #0
 8004916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004918:	702b      	strb	r3, [r5, #0]
 800491a:	f10b 0301 	add.w	r3, fp, #1
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004922:	2b00      	cmp	r3, #0
 8004924:	f43f ace2 	beq.w	80042ec <_dtoa_r+0xa4>
 8004928:	601d      	str	r5, [r3, #0]
 800492a:	e4df      	b.n	80042ec <_dtoa_r+0xa4>
 800492c:	465f      	mov	r7, fp
 800492e:	462b      	mov	r3, r5
 8004930:	461d      	mov	r5, r3
 8004932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004936:	2a39      	cmp	r2, #57	; 0x39
 8004938:	d106      	bne.n	8004948 <_dtoa_r+0x700>
 800493a:	9a00      	ldr	r2, [sp, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1f7      	bne.n	8004930 <_dtoa_r+0x6e8>
 8004940:	9900      	ldr	r1, [sp, #0]
 8004942:	2230      	movs	r2, #48	; 0x30
 8004944:	3701      	adds	r7, #1
 8004946:	700a      	strb	r2, [r1, #0]
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	3201      	adds	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e790      	b.n	8004872 <_dtoa_r+0x62a>
 8004950:	4ba3      	ldr	r3, [pc, #652]	; (8004be0 <_dtoa_r+0x998>)
 8004952:	2200      	movs	r2, #0
 8004954:	f7fb fe50 	bl	80005f8 <__aeabi_dmul>
 8004958:	2200      	movs	r2, #0
 800495a:	2300      	movs	r3, #0
 800495c:	4606      	mov	r6, r0
 800495e:	460f      	mov	r7, r1
 8004960:	f7fc f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004964:	2800      	cmp	r0, #0
 8004966:	d09e      	beq.n	80048a6 <_dtoa_r+0x65e>
 8004968:	e7d0      	b.n	800490c <_dtoa_r+0x6c4>
 800496a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800496c:	2a00      	cmp	r2, #0
 800496e:	f000 80ca 	beq.w	8004b06 <_dtoa_r+0x8be>
 8004972:	9a07      	ldr	r2, [sp, #28]
 8004974:	2a01      	cmp	r2, #1
 8004976:	f300 80ad 	bgt.w	8004ad4 <_dtoa_r+0x88c>
 800497a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800497c:	2a00      	cmp	r2, #0
 800497e:	f000 80a5 	beq.w	8004acc <_dtoa_r+0x884>
 8004982:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004986:	9e08      	ldr	r6, [sp, #32]
 8004988:	9d05      	ldr	r5, [sp, #20]
 800498a:	9a05      	ldr	r2, [sp, #20]
 800498c:	441a      	add	r2, r3
 800498e:	9205      	str	r2, [sp, #20]
 8004990:	9a06      	ldr	r2, [sp, #24]
 8004992:	2101      	movs	r1, #1
 8004994:	441a      	add	r2, r3
 8004996:	4620      	mov	r0, r4
 8004998:	9206      	str	r2, [sp, #24]
 800499a:	f000 fc3d 	bl	8005218 <__i2b>
 800499e:	4607      	mov	r7, r0
 80049a0:	b165      	cbz	r5, 80049bc <_dtoa_r+0x774>
 80049a2:	9b06      	ldr	r3, [sp, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dd09      	ble.n	80049bc <_dtoa_r+0x774>
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	9a05      	ldr	r2, [sp, #20]
 80049ac:	bfa8      	it	ge
 80049ae:	462b      	movge	r3, r5
 80049b0:	1ad2      	subs	r2, r2, r3
 80049b2:	9205      	str	r2, [sp, #20]
 80049b4:	9a06      	ldr	r2, [sp, #24]
 80049b6:	1aed      	subs	r5, r5, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	9306      	str	r3, [sp, #24]
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	b1f3      	cbz	r3, 80049fe <_dtoa_r+0x7b6>
 80049c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80a3 	beq.w	8004b0e <_dtoa_r+0x8c6>
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	dd10      	ble.n	80049ee <_dtoa_r+0x7a6>
 80049cc:	4639      	mov	r1, r7
 80049ce:	4632      	mov	r2, r6
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 fce1 	bl	8005398 <__pow5mult>
 80049d6:	4652      	mov	r2, sl
 80049d8:	4601      	mov	r1, r0
 80049da:	4607      	mov	r7, r0
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 fc31 	bl	8005244 <__multiply>
 80049e2:	4651      	mov	r1, sl
 80049e4:	4680      	mov	r8, r0
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 fb60 	bl	80050ac <_Bfree>
 80049ec:	46c2      	mov	sl, r8
 80049ee:	9b08      	ldr	r3, [sp, #32]
 80049f0:	1b9a      	subs	r2, r3, r6
 80049f2:	d004      	beq.n	80049fe <_dtoa_r+0x7b6>
 80049f4:	4651      	mov	r1, sl
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 fcce 	bl	8005398 <__pow5mult>
 80049fc:	4682      	mov	sl, r0
 80049fe:	2101      	movs	r1, #1
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 fc09 	bl	8005218 <__i2b>
 8004a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	f340 8081 	ble.w	8004b12 <_dtoa_r+0x8ca>
 8004a10:	461a      	mov	r2, r3
 8004a12:	4601      	mov	r1, r0
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 fcbf 	bl	8005398 <__pow5mult>
 8004a1a:	9b07      	ldr	r3, [sp, #28]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	4606      	mov	r6, r0
 8004a20:	dd7a      	ble.n	8004b18 <_dtoa_r+0x8d0>
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	6933      	ldr	r3, [r6, #16]
 8004a28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a2c:	6918      	ldr	r0, [r3, #16]
 8004a2e:	f000 fba5 	bl	800517c <__hi0bits>
 8004a32:	f1c0 0020 	rsb	r0, r0, #32
 8004a36:	9b06      	ldr	r3, [sp, #24]
 8004a38:	4418      	add	r0, r3
 8004a3a:	f010 001f 	ands.w	r0, r0, #31
 8004a3e:	f000 8094 	beq.w	8004b6a <_dtoa_r+0x922>
 8004a42:	f1c0 0320 	rsb	r3, r0, #32
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	f340 8085 	ble.w	8004b56 <_dtoa_r+0x90e>
 8004a4c:	9b05      	ldr	r3, [sp, #20]
 8004a4e:	f1c0 001c 	rsb	r0, r0, #28
 8004a52:	4403      	add	r3, r0
 8004a54:	9305      	str	r3, [sp, #20]
 8004a56:	9b06      	ldr	r3, [sp, #24]
 8004a58:	4403      	add	r3, r0
 8004a5a:	4405      	add	r5, r0
 8004a5c:	9306      	str	r3, [sp, #24]
 8004a5e:	9b05      	ldr	r3, [sp, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dd05      	ble.n	8004a70 <_dtoa_r+0x828>
 8004a64:	4651      	mov	r1, sl
 8004a66:	461a      	mov	r2, r3
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 fcef 	bl	800544c <__lshift>
 8004a6e:	4682      	mov	sl, r0
 8004a70:	9b06      	ldr	r3, [sp, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dd05      	ble.n	8004a82 <_dtoa_r+0x83a>
 8004a76:	4631      	mov	r1, r6
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 fce6 	bl	800544c <__lshift>
 8004a80:	4606      	mov	r6, r0
 8004a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d072      	beq.n	8004b6e <_dtoa_r+0x926>
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	f000 fd4a 	bl	8005524 <__mcmp>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	da6c      	bge.n	8004b6e <_dtoa_r+0x926>
 8004a94:	2300      	movs	r3, #0
 8004a96:	4651      	mov	r1, sl
 8004a98:	220a      	movs	r2, #10
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f000 fb28 	bl	80050f0 <__multadd>
 8004aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004aa6:	4682      	mov	sl, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 81b0 	beq.w	8004e0e <_dtoa_r+0xbc6>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 fb1b 	bl	80050f0 <__multadd>
 8004aba:	9b01      	ldr	r3, [sp, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	4607      	mov	r7, r0
 8004ac0:	f300 8096 	bgt.w	8004bf0 <_dtoa_r+0x9a8>
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	dc59      	bgt.n	8004b7e <_dtoa_r+0x936>
 8004aca:	e091      	b.n	8004bf0 <_dtoa_r+0x9a8>
 8004acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ad2:	e758      	b.n	8004986 <_dtoa_r+0x73e>
 8004ad4:	9b04      	ldr	r3, [sp, #16]
 8004ad6:	1e5e      	subs	r6, r3, #1
 8004ad8:	9b08      	ldr	r3, [sp, #32]
 8004ada:	42b3      	cmp	r3, r6
 8004adc:	bfbf      	itttt	lt
 8004ade:	9b08      	ldrlt	r3, [sp, #32]
 8004ae0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004ae2:	9608      	strlt	r6, [sp, #32]
 8004ae4:	1af3      	sublt	r3, r6, r3
 8004ae6:	bfb4      	ite	lt
 8004ae8:	18d2      	addlt	r2, r2, r3
 8004aea:	1b9e      	subge	r6, r3, r6
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	bfbc      	itt	lt
 8004af0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004af2:	2600      	movlt	r6, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bfb7      	itett	lt
 8004af8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004afc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004b00:	1a9d      	sublt	r5, r3, r2
 8004b02:	2300      	movlt	r3, #0
 8004b04:	e741      	b.n	800498a <_dtoa_r+0x742>
 8004b06:	9e08      	ldr	r6, [sp, #32]
 8004b08:	9d05      	ldr	r5, [sp, #20]
 8004b0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b0c:	e748      	b.n	80049a0 <_dtoa_r+0x758>
 8004b0e:	9a08      	ldr	r2, [sp, #32]
 8004b10:	e770      	b.n	80049f4 <_dtoa_r+0x7ac>
 8004b12:	9b07      	ldr	r3, [sp, #28]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	dc19      	bgt.n	8004b4c <_dtoa_r+0x904>
 8004b18:	9b02      	ldr	r3, [sp, #8]
 8004b1a:	b9bb      	cbnz	r3, 8004b4c <_dtoa_r+0x904>
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b22:	b99b      	cbnz	r3, 8004b4c <_dtoa_r+0x904>
 8004b24:	9b03      	ldr	r3, [sp, #12]
 8004b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b2a:	0d1b      	lsrs	r3, r3, #20
 8004b2c:	051b      	lsls	r3, r3, #20
 8004b2e:	b183      	cbz	r3, 8004b52 <_dtoa_r+0x90a>
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	9305      	str	r3, [sp, #20]
 8004b36:	9b06      	ldr	r3, [sp, #24]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	9306      	str	r3, [sp, #24]
 8004b3c:	f04f 0801 	mov.w	r8, #1
 8004b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f47f af6f 	bne.w	8004a26 <_dtoa_r+0x7de>
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e774      	b.n	8004a36 <_dtoa_r+0x7ee>
 8004b4c:	f04f 0800 	mov.w	r8, #0
 8004b50:	e7f6      	b.n	8004b40 <_dtoa_r+0x8f8>
 8004b52:	4698      	mov	r8, r3
 8004b54:	e7f4      	b.n	8004b40 <_dtoa_r+0x8f8>
 8004b56:	d082      	beq.n	8004a5e <_dtoa_r+0x816>
 8004b58:	9a05      	ldr	r2, [sp, #20]
 8004b5a:	331c      	adds	r3, #28
 8004b5c:	441a      	add	r2, r3
 8004b5e:	9205      	str	r2, [sp, #20]
 8004b60:	9a06      	ldr	r2, [sp, #24]
 8004b62:	441a      	add	r2, r3
 8004b64:	441d      	add	r5, r3
 8004b66:	9206      	str	r2, [sp, #24]
 8004b68:	e779      	b.n	8004a5e <_dtoa_r+0x816>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	e7f4      	b.n	8004b58 <_dtoa_r+0x910>
 8004b6e:	9b04      	ldr	r3, [sp, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dc37      	bgt.n	8004be4 <_dtoa_r+0x99c>
 8004b74:	9b07      	ldr	r3, [sp, #28]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	dd34      	ble.n	8004be4 <_dtoa_r+0x99c>
 8004b7a:	9b04      	ldr	r3, [sp, #16]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	9b01      	ldr	r3, [sp, #4]
 8004b80:	b963      	cbnz	r3, 8004b9c <_dtoa_r+0x954>
 8004b82:	4631      	mov	r1, r6
 8004b84:	2205      	movs	r2, #5
 8004b86:	4620      	mov	r0, r4
 8004b88:	f000 fab2 	bl	80050f0 <__multadd>
 8004b8c:	4601      	mov	r1, r0
 8004b8e:	4606      	mov	r6, r0
 8004b90:	4650      	mov	r0, sl
 8004b92:	f000 fcc7 	bl	8005524 <__mcmp>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f73f adbb 	bgt.w	8004712 <_dtoa_r+0x4ca>
 8004b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b9e:	9d00      	ldr	r5, [sp, #0]
 8004ba0:	ea6f 0b03 	mvn.w	fp, r3
 8004ba4:	f04f 0800 	mov.w	r8, #0
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fa7e 	bl	80050ac <_Bfree>
 8004bb0:	2f00      	cmp	r7, #0
 8004bb2:	f43f aeab 	beq.w	800490c <_dtoa_r+0x6c4>
 8004bb6:	f1b8 0f00 	cmp.w	r8, #0
 8004bba:	d005      	beq.n	8004bc8 <_dtoa_r+0x980>
 8004bbc:	45b8      	cmp	r8, r7
 8004bbe:	d003      	beq.n	8004bc8 <_dtoa_r+0x980>
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 fa72 	bl	80050ac <_Bfree>
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 fa6e 	bl	80050ac <_Bfree>
 8004bd0:	e69c      	b.n	800490c <_dtoa_r+0x6c4>
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	4637      	mov	r7, r6
 8004bd6:	e7e1      	b.n	8004b9c <_dtoa_r+0x954>
 8004bd8:	46bb      	mov	fp, r7
 8004bda:	4637      	mov	r7, r6
 8004bdc:	e599      	b.n	8004712 <_dtoa_r+0x4ca>
 8004bde:	bf00      	nop
 8004be0:	40240000 	.word	0x40240000
 8004be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80c8 	beq.w	8004d7c <_dtoa_r+0xb34>
 8004bec:	9b04      	ldr	r3, [sp, #16]
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	dd05      	ble.n	8004c00 <_dtoa_r+0x9b8>
 8004bf4:	4639      	mov	r1, r7
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fc27 	bl	800544c <__lshift>
 8004bfe:	4607      	mov	r7, r0
 8004c00:	f1b8 0f00 	cmp.w	r8, #0
 8004c04:	d05b      	beq.n	8004cbe <_dtoa_r+0xa76>
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fa0f 	bl	800502c <_Balloc>
 8004c0e:	4605      	mov	r5, r0
 8004c10:	b928      	cbnz	r0, 8004c1e <_dtoa_r+0x9d6>
 8004c12:	4b83      	ldr	r3, [pc, #524]	; (8004e20 <_dtoa_r+0xbd8>)
 8004c14:	4602      	mov	r2, r0
 8004c16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004c1a:	f7ff bb2e 	b.w	800427a <_dtoa_r+0x32>
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	3202      	adds	r2, #2
 8004c22:	0092      	lsls	r2, r2, #2
 8004c24:	f107 010c 	add.w	r1, r7, #12
 8004c28:	300c      	adds	r0, #12
 8004c2a:	f001 f985 	bl	8005f38 <memcpy>
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4629      	mov	r1, r5
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 fc0a 	bl	800544c <__lshift>
 8004c38:	9b00      	ldr	r3, [sp, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c42:	4413      	add	r3, r2
 8004c44:	9308      	str	r3, [sp, #32]
 8004c46:	9b02      	ldr	r3, [sp, #8]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	46b8      	mov	r8, r7
 8004c4e:	9306      	str	r3, [sp, #24]
 8004c50:	4607      	mov	r7, r0
 8004c52:	9b04      	ldr	r3, [sp, #16]
 8004c54:	4631      	mov	r1, r6
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4650      	mov	r0, sl
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	f7ff fa6b 	bl	8004136 <quorem>
 8004c60:	4641      	mov	r1, r8
 8004c62:	9002      	str	r0, [sp, #8]
 8004c64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c68:	4650      	mov	r0, sl
 8004c6a:	f000 fc5b 	bl	8005524 <__mcmp>
 8004c6e:	463a      	mov	r2, r7
 8004c70:	9005      	str	r0, [sp, #20]
 8004c72:	4631      	mov	r1, r6
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 fc71 	bl	800555c <__mdiff>
 8004c7a:	68c2      	ldr	r2, [r0, #12]
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	bb02      	cbnz	r2, 8004cc2 <_dtoa_r+0xa7a>
 8004c80:	4601      	mov	r1, r0
 8004c82:	4650      	mov	r0, sl
 8004c84:	f000 fc4e 	bl	8005524 <__mcmp>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8004c90:	f000 fa0c 	bl	80050ac <_Bfree>
 8004c94:	9b07      	ldr	r3, [sp, #28]
 8004c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c98:	9d04      	ldr	r5, [sp, #16]
 8004c9a:	ea43 0102 	orr.w	r1, r3, r2
 8004c9e:	9b06      	ldr	r3, [sp, #24]
 8004ca0:	4319      	orrs	r1, r3
 8004ca2:	d110      	bne.n	8004cc6 <_dtoa_r+0xa7e>
 8004ca4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ca8:	d029      	beq.n	8004cfe <_dtoa_r+0xab6>
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dd02      	ble.n	8004cb6 <_dtoa_r+0xa6e>
 8004cb0:	9b02      	ldr	r3, [sp, #8]
 8004cb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004cb6:	9b01      	ldr	r3, [sp, #4]
 8004cb8:	f883 9000 	strb.w	r9, [r3]
 8004cbc:	e774      	b.n	8004ba8 <_dtoa_r+0x960>
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	e7ba      	b.n	8004c38 <_dtoa_r+0x9f0>
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	e7e1      	b.n	8004c8a <_dtoa_r+0xa42>
 8004cc6:	9b05      	ldr	r3, [sp, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db04      	blt.n	8004cd6 <_dtoa_r+0xa8e>
 8004ccc:	9907      	ldr	r1, [sp, #28]
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	9906      	ldr	r1, [sp, #24]
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	d120      	bne.n	8004d18 <_dtoa_r+0xad0>
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	dded      	ble.n	8004cb6 <_dtoa_r+0xa6e>
 8004cda:	4651      	mov	r1, sl
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 fbb4 	bl	800544c <__lshift>
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	f000 fc1c 	bl	8005524 <__mcmp>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	dc03      	bgt.n	8004cf8 <_dtoa_r+0xab0>
 8004cf0:	d1e1      	bne.n	8004cb6 <_dtoa_r+0xa6e>
 8004cf2:	f019 0f01 	tst.w	r9, #1
 8004cf6:	d0de      	beq.n	8004cb6 <_dtoa_r+0xa6e>
 8004cf8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cfc:	d1d8      	bne.n	8004cb0 <_dtoa_r+0xa68>
 8004cfe:	9a01      	ldr	r2, [sp, #4]
 8004d00:	2339      	movs	r3, #57	; 0x39
 8004d02:	7013      	strb	r3, [r2, #0]
 8004d04:	462b      	mov	r3, r5
 8004d06:	461d      	mov	r5, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d0e:	2a39      	cmp	r2, #57	; 0x39
 8004d10:	d06c      	beq.n	8004dec <_dtoa_r+0xba4>
 8004d12:	3201      	adds	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e747      	b.n	8004ba8 <_dtoa_r+0x960>
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	dd07      	ble.n	8004d2c <_dtoa_r+0xae4>
 8004d1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d20:	d0ed      	beq.n	8004cfe <_dtoa_r+0xab6>
 8004d22:	9a01      	ldr	r2, [sp, #4]
 8004d24:	f109 0301 	add.w	r3, r9, #1
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	e73d      	b.n	8004ba8 <_dtoa_r+0x960>
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	9a08      	ldr	r2, [sp, #32]
 8004d30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d043      	beq.n	8004dc0 <_dtoa_r+0xb78>
 8004d38:	4651      	mov	r1, sl
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	220a      	movs	r2, #10
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 f9d6 	bl	80050f0 <__multadd>
 8004d44:	45b8      	cmp	r8, r7
 8004d46:	4682      	mov	sl, r0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	f04f 020a 	mov.w	r2, #10
 8004d50:	4641      	mov	r1, r8
 8004d52:	4620      	mov	r0, r4
 8004d54:	d107      	bne.n	8004d66 <_dtoa_r+0xb1e>
 8004d56:	f000 f9cb 	bl	80050f0 <__multadd>
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	9b04      	ldr	r3, [sp, #16]
 8004d60:	3301      	adds	r3, #1
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	e775      	b.n	8004c52 <_dtoa_r+0xa0a>
 8004d66:	f000 f9c3 	bl	80050f0 <__multadd>
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	220a      	movs	r2, #10
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 f9bc 	bl	80050f0 <__multadd>
 8004d78:	4607      	mov	r7, r0
 8004d7a:	e7f0      	b.n	8004d5e <_dtoa_r+0xb16>
 8004d7c:	9b04      	ldr	r3, [sp, #16]
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	9d00      	ldr	r5, [sp, #0]
 8004d82:	4631      	mov	r1, r6
 8004d84:	4650      	mov	r0, sl
 8004d86:	f7ff f9d6 	bl	8004136 <quorem>
 8004d8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	f805 9b01 	strb.w	r9, [r5], #1
 8004d94:	1aea      	subs	r2, r5, r3
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	dd07      	ble.n	8004dac <_dtoa_r+0xb64>
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	2300      	movs	r3, #0
 8004da0:	220a      	movs	r2, #10
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f9a4 	bl	80050f0 <__multadd>
 8004da8:	4682      	mov	sl, r0
 8004daa:	e7ea      	b.n	8004d82 <_dtoa_r+0xb3a>
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfc8      	it	gt
 8004db2:	461d      	movgt	r5, r3
 8004db4:	9b00      	ldr	r3, [sp, #0]
 8004db6:	bfd8      	it	le
 8004db8:	2501      	movle	r5, #1
 8004dba:	441d      	add	r5, r3
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fb41 	bl	800544c <__lshift>
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4682      	mov	sl, r0
 8004dce:	f000 fba9 	bl	8005524 <__mcmp>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	dc96      	bgt.n	8004d04 <_dtoa_r+0xabc>
 8004dd6:	d102      	bne.n	8004dde <_dtoa_r+0xb96>
 8004dd8:	f019 0f01 	tst.w	r9, #1
 8004ddc:	d192      	bne.n	8004d04 <_dtoa_r+0xabc>
 8004dde:	462b      	mov	r3, r5
 8004de0:	461d      	mov	r5, r3
 8004de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004de6:	2a30      	cmp	r2, #48	; 0x30
 8004de8:	d0fa      	beq.n	8004de0 <_dtoa_r+0xb98>
 8004dea:	e6dd      	b.n	8004ba8 <_dtoa_r+0x960>
 8004dec:	9a00      	ldr	r2, [sp, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d189      	bne.n	8004d06 <_dtoa_r+0xabe>
 8004df2:	f10b 0b01 	add.w	fp, fp, #1
 8004df6:	2331      	movs	r3, #49	; 0x31
 8004df8:	e796      	b.n	8004d28 <_dtoa_r+0xae0>
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <_dtoa_r+0xbdc>)
 8004dfc:	f7ff ba99 	b.w	8004332 <_dtoa_r+0xea>
 8004e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f47f aa6d 	bne.w	80042e2 <_dtoa_r+0x9a>
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <_dtoa_r+0xbe0>)
 8004e0a:	f7ff ba92 	b.w	8004332 <_dtoa_r+0xea>
 8004e0e:	9b01      	ldr	r3, [sp, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dcb5      	bgt.n	8004d80 <_dtoa_r+0xb38>
 8004e14:	9b07      	ldr	r3, [sp, #28]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	f73f aeb1 	bgt.w	8004b7e <_dtoa_r+0x936>
 8004e1c:	e7b0      	b.n	8004d80 <_dtoa_r+0xb38>
 8004e1e:	bf00      	nop
 8004e20:	08006350 	.word	0x08006350
 8004e24:	080062b0 	.word	0x080062b0
 8004e28:	080062d4 	.word	0x080062d4

08004e2c <_free_r>:
 8004e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d044      	beq.n	8004ebc <_free_r+0x90>
 8004e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e36:	9001      	str	r0, [sp, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e3e:	bfb8      	it	lt
 8004e40:	18e4      	addlt	r4, r4, r3
 8004e42:	f000 f8e7 	bl	8005014 <__malloc_lock>
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <_free_r+0x94>)
 8004e48:	9801      	ldr	r0, [sp, #4]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	b933      	cbnz	r3, 8004e5c <_free_r+0x30>
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	6014      	str	r4, [r2, #0]
 8004e52:	b003      	add	sp, #12
 8004e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e58:	f000 b8e2 	b.w	8005020 <__malloc_unlock>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d908      	bls.n	8004e72 <_free_r+0x46>
 8004e60:	6825      	ldr	r5, [r4, #0]
 8004e62:	1961      	adds	r1, r4, r5
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf01      	itttt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	1949      	addeq	r1, r1, r5
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	e7ed      	b.n	8004e4e <_free_r+0x22>
 8004e72:	461a      	mov	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b10b      	cbz	r3, 8004e7c <_free_r+0x50>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d9fa      	bls.n	8004e72 <_free_r+0x46>
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	1855      	adds	r5, r2, r1
 8004e80:	42a5      	cmp	r5, r4
 8004e82:	d10b      	bne.n	8004e9c <_free_r+0x70>
 8004e84:	6824      	ldr	r4, [r4, #0]
 8004e86:	4421      	add	r1, r4
 8004e88:	1854      	adds	r4, r2, r1
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	d1e0      	bne.n	8004e52 <_free_r+0x26>
 8004e90:	681c      	ldr	r4, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	6053      	str	r3, [r2, #4]
 8004e96:	440c      	add	r4, r1
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	e7da      	b.n	8004e52 <_free_r+0x26>
 8004e9c:	d902      	bls.n	8004ea4 <_free_r+0x78>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	e7d6      	b.n	8004e52 <_free_r+0x26>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	1961      	adds	r1, r4, r5
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf04      	itt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	bf04      	itt	eq
 8004eb4:	1949      	addeq	r1, r1, r5
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	6054      	str	r4, [r2, #4]
 8004eba:	e7ca      	b.n	8004e52 <_free_r+0x26>
 8004ebc:	b003      	add	sp, #12
 8004ebe:	bd30      	pop	{r4, r5, pc}
 8004ec0:	200003c8 	.word	0x200003c8

08004ec4 <malloc>:
 8004ec4:	4b02      	ldr	r3, [pc, #8]	; (8004ed0 <malloc+0xc>)
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	f000 b823 	b.w	8004f14 <_malloc_r>
 8004ece:	bf00      	nop
 8004ed0:	20000064 	.word	0x20000064

08004ed4 <sbrk_aligned>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	4e0e      	ldr	r6, [pc, #56]	; (8004f10 <sbrk_aligned+0x3c>)
 8004ed8:	460c      	mov	r4, r1
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	4605      	mov	r5, r0
 8004ede:	b911      	cbnz	r1, 8004ee6 <sbrk_aligned+0x12>
 8004ee0:	f001 f81a 	bl	8005f18 <_sbrk_r>
 8004ee4:	6030      	str	r0, [r6, #0]
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f001 f815 	bl	8005f18 <_sbrk_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d00a      	beq.n	8004f08 <sbrk_aligned+0x34>
 8004ef2:	1cc4      	adds	r4, r0, #3
 8004ef4:	f024 0403 	bic.w	r4, r4, #3
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d007      	beq.n	8004f0c <sbrk_aligned+0x38>
 8004efc:	1a21      	subs	r1, r4, r0
 8004efe:	4628      	mov	r0, r5
 8004f00:	f001 f80a 	bl	8005f18 <_sbrk_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d101      	bne.n	8004f0c <sbrk_aligned+0x38>
 8004f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	200003cc 	.word	0x200003cc

08004f14 <_malloc_r>:
 8004f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f18:	1ccd      	adds	r5, r1, #3
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	4607      	mov	r7, r0
 8004f2a:	db01      	blt.n	8004f30 <_malloc_r+0x1c>
 8004f2c:	42a9      	cmp	r1, r5
 8004f2e:	d905      	bls.n	8004f3c <_malloc_r+0x28>
 8004f30:	230c      	movs	r3, #12
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	2600      	movs	r6, #0
 8004f36:	4630      	mov	r0, r6
 8004f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005010 <_malloc_r+0xfc>
 8004f40:	f000 f868 	bl	8005014 <__malloc_lock>
 8004f44:	f8d8 3000 	ldr.w	r3, [r8]
 8004f48:	461c      	mov	r4, r3
 8004f4a:	bb5c      	cbnz	r4, 8004fa4 <_malloc_r+0x90>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f7ff ffc0 	bl	8004ed4 <sbrk_aligned>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	4604      	mov	r4, r0
 8004f58:	d155      	bne.n	8005006 <_malloc_r+0xf2>
 8004f5a:	f8d8 4000 	ldr.w	r4, [r8]
 8004f5e:	4626      	mov	r6, r4
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	d145      	bne.n	8004ff0 <_malloc_r+0xdc>
 8004f64:	2c00      	cmp	r4, #0
 8004f66:	d048      	beq.n	8004ffa <_malloc_r+0xe6>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	eb04 0903 	add.w	r9, r4, r3
 8004f72:	f000 ffd1 	bl	8005f18 <_sbrk_r>
 8004f76:	4581      	cmp	r9, r0
 8004f78:	d13f      	bne.n	8004ffa <_malloc_r+0xe6>
 8004f7a:	6821      	ldr	r1, [r4, #0]
 8004f7c:	1a6d      	subs	r5, r5, r1
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ffa7 	bl	8004ed4 <sbrk_aligned>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d037      	beq.n	8004ffa <_malloc_r+0xe6>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	442b      	add	r3, r5
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	f8d8 3000 	ldr.w	r3, [r8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d038      	beq.n	800500a <_malloc_r+0xf6>
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	42a2      	cmp	r2, r4
 8004f9c:	d12b      	bne.n	8004ff6 <_malloc_r+0xe2>
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e00f      	b.n	8004fc4 <_malloc_r+0xb0>
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	1b52      	subs	r2, r2, r5
 8004fa8:	d41f      	bmi.n	8004fea <_malloc_r+0xd6>
 8004faa:	2a0b      	cmp	r2, #11
 8004fac:	d917      	bls.n	8004fde <_malloc_r+0xca>
 8004fae:	1961      	adds	r1, r4, r5
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	6025      	str	r5, [r4, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	6059      	strne	r1, [r3, #4]
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	bf08      	it	eq
 8004fbc:	f8c8 1000 	streq.w	r1, [r8]
 8004fc0:	5162      	str	r2, [r4, r5]
 8004fc2:	604b      	str	r3, [r1, #4]
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f104 060b 	add.w	r6, r4, #11
 8004fca:	f000 f829 	bl	8005020 <__malloc_unlock>
 8004fce:	f026 0607 	bic.w	r6, r6, #7
 8004fd2:	1d23      	adds	r3, r4, #4
 8004fd4:	1af2      	subs	r2, r6, r3
 8004fd6:	d0ae      	beq.n	8004f36 <_malloc_r+0x22>
 8004fd8:	1b9b      	subs	r3, r3, r6
 8004fda:	50a3      	str	r3, [r4, r2]
 8004fdc:	e7ab      	b.n	8004f36 <_malloc_r+0x22>
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	6862      	ldr	r2, [r4, #4]
 8004fe2:	d1dd      	bne.n	8004fa0 <_malloc_r+0x8c>
 8004fe4:	f8c8 2000 	str.w	r2, [r8]
 8004fe8:	e7ec      	b.n	8004fc4 <_malloc_r+0xb0>
 8004fea:	4623      	mov	r3, r4
 8004fec:	6864      	ldr	r4, [r4, #4]
 8004fee:	e7ac      	b.n	8004f4a <_malloc_r+0x36>
 8004ff0:	4634      	mov	r4, r6
 8004ff2:	6876      	ldr	r6, [r6, #4]
 8004ff4:	e7b4      	b.n	8004f60 <_malloc_r+0x4c>
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	e7cc      	b.n	8004f94 <_malloc_r+0x80>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4638      	mov	r0, r7
 8005000:	f000 f80e 	bl	8005020 <__malloc_unlock>
 8005004:	e797      	b.n	8004f36 <_malloc_r+0x22>
 8005006:	6025      	str	r5, [r4, #0]
 8005008:	e7dc      	b.n	8004fc4 <_malloc_r+0xb0>
 800500a:	605b      	str	r3, [r3, #4]
 800500c:	deff      	udf	#255	; 0xff
 800500e:	bf00      	nop
 8005010:	200003c8 	.word	0x200003c8

08005014 <__malloc_lock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_lock+0x8>)
 8005016:	f7ff b88c 	b.w	8004132 <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	200003c4 	.word	0x200003c4

08005020 <__malloc_unlock>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__malloc_unlock+0x8>)
 8005022:	f7ff b887 	b.w	8004134 <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	200003c4 	.word	0x200003c4

0800502c <_Balloc>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	69c6      	ldr	r6, [r0, #28]
 8005030:	4604      	mov	r4, r0
 8005032:	460d      	mov	r5, r1
 8005034:	b976      	cbnz	r6, 8005054 <_Balloc+0x28>
 8005036:	2010      	movs	r0, #16
 8005038:	f7ff ff44 	bl	8004ec4 <malloc>
 800503c:	4602      	mov	r2, r0
 800503e:	61e0      	str	r0, [r4, #28]
 8005040:	b920      	cbnz	r0, 800504c <_Balloc+0x20>
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <_Balloc+0x78>)
 8005044:	4818      	ldr	r0, [pc, #96]	; (80050a8 <_Balloc+0x7c>)
 8005046:	216b      	movs	r1, #107	; 0x6b
 8005048:	f000 ff84 	bl	8005f54 <__assert_func>
 800504c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005050:	6006      	str	r6, [r0, #0]
 8005052:	60c6      	str	r6, [r0, #12]
 8005054:	69e6      	ldr	r6, [r4, #28]
 8005056:	68f3      	ldr	r3, [r6, #12]
 8005058:	b183      	cbz	r3, 800507c <_Balloc+0x50>
 800505a:	69e3      	ldr	r3, [r4, #28]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005062:	b9b8      	cbnz	r0, 8005094 <_Balloc+0x68>
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f605 	lsl.w	r6, r1, r5
 800506a:	1d72      	adds	r2, r6, #5
 800506c:	0092      	lsls	r2, r2, #2
 800506e:	4620      	mov	r0, r4
 8005070:	f000 ff8e 	bl	8005f90 <_calloc_r>
 8005074:	b160      	cbz	r0, 8005090 <_Balloc+0x64>
 8005076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800507a:	e00e      	b.n	800509a <_Balloc+0x6e>
 800507c:	2221      	movs	r2, #33	; 0x21
 800507e:	2104      	movs	r1, #4
 8005080:	4620      	mov	r0, r4
 8005082:	f000 ff85 	bl	8005f90 <_calloc_r>
 8005086:	69e3      	ldr	r3, [r4, #28]
 8005088:	60f0      	str	r0, [r6, #12]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e4      	bne.n	800505a <_Balloc+0x2e>
 8005090:	2000      	movs	r0, #0
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	6802      	ldr	r2, [r0, #0]
 8005096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800509a:	2300      	movs	r3, #0
 800509c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050a0:	e7f7      	b.n	8005092 <_Balloc+0x66>
 80050a2:	bf00      	nop
 80050a4:	080062e1 	.word	0x080062e1
 80050a8:	08006361 	.word	0x08006361

080050ac <_Bfree>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	69c6      	ldr	r6, [r0, #28]
 80050b0:	4605      	mov	r5, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	b976      	cbnz	r6, 80050d4 <_Bfree+0x28>
 80050b6:	2010      	movs	r0, #16
 80050b8:	f7ff ff04 	bl	8004ec4 <malloc>
 80050bc:	4602      	mov	r2, r0
 80050be:	61e8      	str	r0, [r5, #28]
 80050c0:	b920      	cbnz	r0, 80050cc <_Bfree+0x20>
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <_Bfree+0x3c>)
 80050c4:	4809      	ldr	r0, [pc, #36]	; (80050ec <_Bfree+0x40>)
 80050c6:	218f      	movs	r1, #143	; 0x8f
 80050c8:	f000 ff44 	bl	8005f54 <__assert_func>
 80050cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050d0:	6006      	str	r6, [r0, #0]
 80050d2:	60c6      	str	r6, [r0, #12]
 80050d4:	b13c      	cbz	r4, 80050e6 <_Bfree+0x3a>
 80050d6:	69eb      	ldr	r3, [r5, #28]
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050e0:	6021      	str	r1, [r4, #0]
 80050e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	080062e1 	.word	0x080062e1
 80050ec:	08006361 	.word	0x08006361

080050f0 <__multadd>:
 80050f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f4:	690d      	ldr	r5, [r1, #16]
 80050f6:	4607      	mov	r7, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	461e      	mov	r6, r3
 80050fc:	f101 0c14 	add.w	ip, r1, #20
 8005100:	2000      	movs	r0, #0
 8005102:	f8dc 3000 	ldr.w	r3, [ip]
 8005106:	b299      	uxth	r1, r3
 8005108:	fb02 6101 	mla	r1, r2, r1, r6
 800510c:	0c1e      	lsrs	r6, r3, #16
 800510e:	0c0b      	lsrs	r3, r1, #16
 8005110:	fb02 3306 	mla	r3, r2, r6, r3
 8005114:	b289      	uxth	r1, r1
 8005116:	3001      	adds	r0, #1
 8005118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800511c:	4285      	cmp	r5, r0
 800511e:	f84c 1b04 	str.w	r1, [ip], #4
 8005122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005126:	dcec      	bgt.n	8005102 <__multadd+0x12>
 8005128:	b30e      	cbz	r6, 800516e <__multadd+0x7e>
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	42ab      	cmp	r3, r5
 800512e:	dc19      	bgt.n	8005164 <__multadd+0x74>
 8005130:	6861      	ldr	r1, [r4, #4]
 8005132:	4638      	mov	r0, r7
 8005134:	3101      	adds	r1, #1
 8005136:	f7ff ff79 	bl	800502c <_Balloc>
 800513a:	4680      	mov	r8, r0
 800513c:	b928      	cbnz	r0, 800514a <__multadd+0x5a>
 800513e:	4602      	mov	r2, r0
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <__multadd+0x84>)
 8005142:	480d      	ldr	r0, [pc, #52]	; (8005178 <__multadd+0x88>)
 8005144:	21ba      	movs	r1, #186	; 0xba
 8005146:	f000 ff05 	bl	8005f54 <__assert_func>
 800514a:	6922      	ldr	r2, [r4, #16]
 800514c:	3202      	adds	r2, #2
 800514e:	f104 010c 	add.w	r1, r4, #12
 8005152:	0092      	lsls	r2, r2, #2
 8005154:	300c      	adds	r0, #12
 8005156:	f000 feef 	bl	8005f38 <memcpy>
 800515a:	4621      	mov	r1, r4
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff ffa5 	bl	80050ac <_Bfree>
 8005162:	4644      	mov	r4, r8
 8005164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005168:	3501      	adds	r5, #1
 800516a:	615e      	str	r6, [r3, #20]
 800516c:	6125      	str	r5, [r4, #16]
 800516e:	4620      	mov	r0, r4
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	08006350 	.word	0x08006350
 8005178:	08006361 	.word	0x08006361

0800517c <__hi0bits>:
 800517c:	0c03      	lsrs	r3, r0, #16
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	b9d3      	cbnz	r3, 80051b8 <__hi0bits+0x3c>
 8005182:	0400      	lsls	r0, r0, #16
 8005184:	2310      	movs	r3, #16
 8005186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800518a:	bf04      	itt	eq
 800518c:	0200      	lsleq	r0, r0, #8
 800518e:	3308      	addeq	r3, #8
 8005190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005194:	bf04      	itt	eq
 8005196:	0100      	lsleq	r0, r0, #4
 8005198:	3304      	addeq	r3, #4
 800519a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800519e:	bf04      	itt	eq
 80051a0:	0080      	lsleq	r0, r0, #2
 80051a2:	3302      	addeq	r3, #2
 80051a4:	2800      	cmp	r0, #0
 80051a6:	db05      	blt.n	80051b4 <__hi0bits+0x38>
 80051a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051ac:	f103 0301 	add.w	r3, r3, #1
 80051b0:	bf08      	it	eq
 80051b2:	2320      	moveq	r3, #32
 80051b4:	4618      	mov	r0, r3
 80051b6:	4770      	bx	lr
 80051b8:	2300      	movs	r3, #0
 80051ba:	e7e4      	b.n	8005186 <__hi0bits+0xa>

080051bc <__lo0bits>:
 80051bc:	6803      	ldr	r3, [r0, #0]
 80051be:	f013 0207 	ands.w	r2, r3, #7
 80051c2:	d00c      	beq.n	80051de <__lo0bits+0x22>
 80051c4:	07d9      	lsls	r1, r3, #31
 80051c6:	d422      	bmi.n	800520e <__lo0bits+0x52>
 80051c8:	079a      	lsls	r2, r3, #30
 80051ca:	bf49      	itett	mi
 80051cc:	085b      	lsrmi	r3, r3, #1
 80051ce:	089b      	lsrpl	r3, r3, #2
 80051d0:	6003      	strmi	r3, [r0, #0]
 80051d2:	2201      	movmi	r2, #1
 80051d4:	bf5c      	itt	pl
 80051d6:	6003      	strpl	r3, [r0, #0]
 80051d8:	2202      	movpl	r2, #2
 80051da:	4610      	mov	r0, r2
 80051dc:	4770      	bx	lr
 80051de:	b299      	uxth	r1, r3
 80051e0:	b909      	cbnz	r1, 80051e6 <__lo0bits+0x2a>
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	2210      	movs	r2, #16
 80051e6:	b2d9      	uxtb	r1, r3
 80051e8:	b909      	cbnz	r1, 80051ee <__lo0bits+0x32>
 80051ea:	3208      	adds	r2, #8
 80051ec:	0a1b      	lsrs	r3, r3, #8
 80051ee:	0719      	lsls	r1, r3, #28
 80051f0:	bf04      	itt	eq
 80051f2:	091b      	lsreq	r3, r3, #4
 80051f4:	3204      	addeq	r2, #4
 80051f6:	0799      	lsls	r1, r3, #30
 80051f8:	bf04      	itt	eq
 80051fa:	089b      	lsreq	r3, r3, #2
 80051fc:	3202      	addeq	r2, #2
 80051fe:	07d9      	lsls	r1, r3, #31
 8005200:	d403      	bmi.n	800520a <__lo0bits+0x4e>
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	f102 0201 	add.w	r2, r2, #1
 8005208:	d003      	beq.n	8005212 <__lo0bits+0x56>
 800520a:	6003      	str	r3, [r0, #0]
 800520c:	e7e5      	b.n	80051da <__lo0bits+0x1e>
 800520e:	2200      	movs	r2, #0
 8005210:	e7e3      	b.n	80051da <__lo0bits+0x1e>
 8005212:	2220      	movs	r2, #32
 8005214:	e7e1      	b.n	80051da <__lo0bits+0x1e>
	...

08005218 <__i2b>:
 8005218:	b510      	push	{r4, lr}
 800521a:	460c      	mov	r4, r1
 800521c:	2101      	movs	r1, #1
 800521e:	f7ff ff05 	bl	800502c <_Balloc>
 8005222:	4602      	mov	r2, r0
 8005224:	b928      	cbnz	r0, 8005232 <__i2b+0x1a>
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <__i2b+0x24>)
 8005228:	4805      	ldr	r0, [pc, #20]	; (8005240 <__i2b+0x28>)
 800522a:	f240 1145 	movw	r1, #325	; 0x145
 800522e:	f000 fe91 	bl	8005f54 <__assert_func>
 8005232:	2301      	movs	r3, #1
 8005234:	6144      	str	r4, [r0, #20]
 8005236:	6103      	str	r3, [r0, #16]
 8005238:	bd10      	pop	{r4, pc}
 800523a:	bf00      	nop
 800523c:	08006350 	.word	0x08006350
 8005240:	08006361 	.word	0x08006361

08005244 <__multiply>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	4691      	mov	r9, r2
 800524a:	690a      	ldr	r2, [r1, #16]
 800524c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	bfb8      	it	lt
 8005254:	460b      	movlt	r3, r1
 8005256:	460c      	mov	r4, r1
 8005258:	bfbc      	itt	lt
 800525a:	464c      	movlt	r4, r9
 800525c:	4699      	movlt	r9, r3
 800525e:	6927      	ldr	r7, [r4, #16]
 8005260:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005264:	68a3      	ldr	r3, [r4, #8]
 8005266:	6861      	ldr	r1, [r4, #4]
 8005268:	eb07 060a 	add.w	r6, r7, sl
 800526c:	42b3      	cmp	r3, r6
 800526e:	b085      	sub	sp, #20
 8005270:	bfb8      	it	lt
 8005272:	3101      	addlt	r1, #1
 8005274:	f7ff feda 	bl	800502c <_Balloc>
 8005278:	b930      	cbnz	r0, 8005288 <__multiply+0x44>
 800527a:	4602      	mov	r2, r0
 800527c:	4b44      	ldr	r3, [pc, #272]	; (8005390 <__multiply+0x14c>)
 800527e:	4845      	ldr	r0, [pc, #276]	; (8005394 <__multiply+0x150>)
 8005280:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005284:	f000 fe66 	bl	8005f54 <__assert_func>
 8005288:	f100 0514 	add.w	r5, r0, #20
 800528c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005290:	462b      	mov	r3, r5
 8005292:	2200      	movs	r2, #0
 8005294:	4543      	cmp	r3, r8
 8005296:	d321      	bcc.n	80052dc <__multiply+0x98>
 8005298:	f104 0314 	add.w	r3, r4, #20
 800529c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052a0:	f109 0314 	add.w	r3, r9, #20
 80052a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052a8:	9202      	str	r2, [sp, #8]
 80052aa:	1b3a      	subs	r2, r7, r4
 80052ac:	3a15      	subs	r2, #21
 80052ae:	f022 0203 	bic.w	r2, r2, #3
 80052b2:	3204      	adds	r2, #4
 80052b4:	f104 0115 	add.w	r1, r4, #21
 80052b8:	428f      	cmp	r7, r1
 80052ba:	bf38      	it	cc
 80052bc:	2204      	movcc	r2, #4
 80052be:	9201      	str	r2, [sp, #4]
 80052c0:	9a02      	ldr	r2, [sp, #8]
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d80c      	bhi.n	80052e2 <__multiply+0x9e>
 80052c8:	2e00      	cmp	r6, #0
 80052ca:	dd03      	ble.n	80052d4 <__multiply+0x90>
 80052cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d05b      	beq.n	800538c <__multiply+0x148>
 80052d4:	6106      	str	r6, [r0, #16]
 80052d6:	b005      	add	sp, #20
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	f843 2b04 	str.w	r2, [r3], #4
 80052e0:	e7d8      	b.n	8005294 <__multiply+0x50>
 80052e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80052e6:	f1ba 0f00 	cmp.w	sl, #0
 80052ea:	d024      	beq.n	8005336 <__multiply+0xf2>
 80052ec:	f104 0e14 	add.w	lr, r4, #20
 80052f0:	46a9      	mov	r9, r5
 80052f2:	f04f 0c00 	mov.w	ip, #0
 80052f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80052fa:	f8d9 1000 	ldr.w	r1, [r9]
 80052fe:	fa1f fb82 	uxth.w	fp, r2
 8005302:	b289      	uxth	r1, r1
 8005304:	fb0a 110b 	mla	r1, sl, fp, r1
 8005308:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800530c:	f8d9 2000 	ldr.w	r2, [r9]
 8005310:	4461      	add	r1, ip
 8005312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005316:	fb0a c20b 	mla	r2, sl, fp, ip
 800531a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800531e:	b289      	uxth	r1, r1
 8005320:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005324:	4577      	cmp	r7, lr
 8005326:	f849 1b04 	str.w	r1, [r9], #4
 800532a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800532e:	d8e2      	bhi.n	80052f6 <__multiply+0xb2>
 8005330:	9a01      	ldr	r2, [sp, #4]
 8005332:	f845 c002 	str.w	ip, [r5, r2]
 8005336:	9a03      	ldr	r2, [sp, #12]
 8005338:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800533c:	3304      	adds	r3, #4
 800533e:	f1b9 0f00 	cmp.w	r9, #0
 8005342:	d021      	beq.n	8005388 <__multiply+0x144>
 8005344:	6829      	ldr	r1, [r5, #0]
 8005346:	f104 0c14 	add.w	ip, r4, #20
 800534a:	46ae      	mov	lr, r5
 800534c:	f04f 0a00 	mov.w	sl, #0
 8005350:	f8bc b000 	ldrh.w	fp, [ip]
 8005354:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005358:	fb09 220b 	mla	r2, r9, fp, r2
 800535c:	4452      	add	r2, sl
 800535e:	b289      	uxth	r1, r1
 8005360:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005364:	f84e 1b04 	str.w	r1, [lr], #4
 8005368:	f85c 1b04 	ldr.w	r1, [ip], #4
 800536c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005370:	f8be 1000 	ldrh.w	r1, [lr]
 8005374:	fb09 110a 	mla	r1, r9, sl, r1
 8005378:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800537c:	4567      	cmp	r7, ip
 800537e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005382:	d8e5      	bhi.n	8005350 <__multiply+0x10c>
 8005384:	9a01      	ldr	r2, [sp, #4]
 8005386:	50a9      	str	r1, [r5, r2]
 8005388:	3504      	adds	r5, #4
 800538a:	e799      	b.n	80052c0 <__multiply+0x7c>
 800538c:	3e01      	subs	r6, #1
 800538e:	e79b      	b.n	80052c8 <__multiply+0x84>
 8005390:	08006350 	.word	0x08006350
 8005394:	08006361 	.word	0x08006361

08005398 <__pow5mult>:
 8005398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800539c:	4615      	mov	r5, r2
 800539e:	f012 0203 	ands.w	r2, r2, #3
 80053a2:	4606      	mov	r6, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	d007      	beq.n	80053b8 <__pow5mult+0x20>
 80053a8:	4c25      	ldr	r4, [pc, #148]	; (8005440 <__pow5mult+0xa8>)
 80053aa:	3a01      	subs	r2, #1
 80053ac:	2300      	movs	r3, #0
 80053ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053b2:	f7ff fe9d 	bl	80050f0 <__multadd>
 80053b6:	4607      	mov	r7, r0
 80053b8:	10ad      	asrs	r5, r5, #2
 80053ba:	d03d      	beq.n	8005438 <__pow5mult+0xa0>
 80053bc:	69f4      	ldr	r4, [r6, #28]
 80053be:	b97c      	cbnz	r4, 80053e0 <__pow5mult+0x48>
 80053c0:	2010      	movs	r0, #16
 80053c2:	f7ff fd7f 	bl	8004ec4 <malloc>
 80053c6:	4602      	mov	r2, r0
 80053c8:	61f0      	str	r0, [r6, #28]
 80053ca:	b928      	cbnz	r0, 80053d8 <__pow5mult+0x40>
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <__pow5mult+0xac>)
 80053ce:	481e      	ldr	r0, [pc, #120]	; (8005448 <__pow5mult+0xb0>)
 80053d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80053d4:	f000 fdbe 	bl	8005f54 <__assert_func>
 80053d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053dc:	6004      	str	r4, [r0, #0]
 80053de:	60c4      	str	r4, [r0, #12]
 80053e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80053e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053e8:	b94c      	cbnz	r4, 80053fe <__pow5mult+0x66>
 80053ea:	f240 2171 	movw	r1, #625	; 0x271
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7ff ff12 	bl	8005218 <__i2b>
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80053fa:	4604      	mov	r4, r0
 80053fc:	6003      	str	r3, [r0, #0]
 80053fe:	f04f 0900 	mov.w	r9, #0
 8005402:	07eb      	lsls	r3, r5, #31
 8005404:	d50a      	bpl.n	800541c <__pow5mult+0x84>
 8005406:	4639      	mov	r1, r7
 8005408:	4622      	mov	r2, r4
 800540a:	4630      	mov	r0, r6
 800540c:	f7ff ff1a 	bl	8005244 <__multiply>
 8005410:	4639      	mov	r1, r7
 8005412:	4680      	mov	r8, r0
 8005414:	4630      	mov	r0, r6
 8005416:	f7ff fe49 	bl	80050ac <_Bfree>
 800541a:	4647      	mov	r7, r8
 800541c:	106d      	asrs	r5, r5, #1
 800541e:	d00b      	beq.n	8005438 <__pow5mult+0xa0>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	b938      	cbnz	r0, 8005434 <__pow5mult+0x9c>
 8005424:	4622      	mov	r2, r4
 8005426:	4621      	mov	r1, r4
 8005428:	4630      	mov	r0, r6
 800542a:	f7ff ff0b 	bl	8005244 <__multiply>
 800542e:	6020      	str	r0, [r4, #0]
 8005430:	f8c0 9000 	str.w	r9, [r0]
 8005434:	4604      	mov	r4, r0
 8005436:	e7e4      	b.n	8005402 <__pow5mult+0x6a>
 8005438:	4638      	mov	r0, r7
 800543a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800543e:	bf00      	nop
 8005440:	080064b0 	.word	0x080064b0
 8005444:	080062e1 	.word	0x080062e1
 8005448:	08006361 	.word	0x08006361

0800544c <__lshift>:
 800544c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	6849      	ldr	r1, [r1, #4]
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800545a:	68a3      	ldr	r3, [r4, #8]
 800545c:	4607      	mov	r7, r0
 800545e:	4691      	mov	r9, r2
 8005460:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005464:	f108 0601 	add.w	r6, r8, #1
 8005468:	42b3      	cmp	r3, r6
 800546a:	db0b      	blt.n	8005484 <__lshift+0x38>
 800546c:	4638      	mov	r0, r7
 800546e:	f7ff fddd 	bl	800502c <_Balloc>
 8005472:	4605      	mov	r5, r0
 8005474:	b948      	cbnz	r0, 800548a <__lshift+0x3e>
 8005476:	4602      	mov	r2, r0
 8005478:	4b28      	ldr	r3, [pc, #160]	; (800551c <__lshift+0xd0>)
 800547a:	4829      	ldr	r0, [pc, #164]	; (8005520 <__lshift+0xd4>)
 800547c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005480:	f000 fd68 	bl	8005f54 <__assert_func>
 8005484:	3101      	adds	r1, #1
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	e7ee      	b.n	8005468 <__lshift+0x1c>
 800548a:	2300      	movs	r3, #0
 800548c:	f100 0114 	add.w	r1, r0, #20
 8005490:	f100 0210 	add.w	r2, r0, #16
 8005494:	4618      	mov	r0, r3
 8005496:	4553      	cmp	r3, sl
 8005498:	db33      	blt.n	8005502 <__lshift+0xb6>
 800549a:	6920      	ldr	r0, [r4, #16]
 800549c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054a0:	f104 0314 	add.w	r3, r4, #20
 80054a4:	f019 091f 	ands.w	r9, r9, #31
 80054a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054b0:	d02b      	beq.n	800550a <__lshift+0xbe>
 80054b2:	f1c9 0e20 	rsb	lr, r9, #32
 80054b6:	468a      	mov	sl, r1
 80054b8:	2200      	movs	r2, #0
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	fa00 f009 	lsl.w	r0, r0, r9
 80054c0:	4310      	orrs	r0, r2
 80054c2:	f84a 0b04 	str.w	r0, [sl], #4
 80054c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ca:	459c      	cmp	ip, r3
 80054cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80054d0:	d8f3      	bhi.n	80054ba <__lshift+0x6e>
 80054d2:	ebac 0304 	sub.w	r3, ip, r4
 80054d6:	3b15      	subs	r3, #21
 80054d8:	f023 0303 	bic.w	r3, r3, #3
 80054dc:	3304      	adds	r3, #4
 80054de:	f104 0015 	add.w	r0, r4, #21
 80054e2:	4584      	cmp	ip, r0
 80054e4:	bf38      	it	cc
 80054e6:	2304      	movcc	r3, #4
 80054e8:	50ca      	str	r2, [r1, r3]
 80054ea:	b10a      	cbz	r2, 80054f0 <__lshift+0xa4>
 80054ec:	f108 0602 	add.w	r6, r8, #2
 80054f0:	3e01      	subs	r6, #1
 80054f2:	4638      	mov	r0, r7
 80054f4:	612e      	str	r6, [r5, #16]
 80054f6:	4621      	mov	r1, r4
 80054f8:	f7ff fdd8 	bl	80050ac <_Bfree>
 80054fc:	4628      	mov	r0, r5
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	f842 0f04 	str.w	r0, [r2, #4]!
 8005506:	3301      	adds	r3, #1
 8005508:	e7c5      	b.n	8005496 <__lshift+0x4a>
 800550a:	3904      	subs	r1, #4
 800550c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005510:	f841 2f04 	str.w	r2, [r1, #4]!
 8005514:	459c      	cmp	ip, r3
 8005516:	d8f9      	bhi.n	800550c <__lshift+0xc0>
 8005518:	e7ea      	b.n	80054f0 <__lshift+0xa4>
 800551a:	bf00      	nop
 800551c:	08006350 	.word	0x08006350
 8005520:	08006361 	.word	0x08006361

08005524 <__mcmp>:
 8005524:	b530      	push	{r4, r5, lr}
 8005526:	6902      	ldr	r2, [r0, #16]
 8005528:	690c      	ldr	r4, [r1, #16]
 800552a:	1b12      	subs	r2, r2, r4
 800552c:	d10e      	bne.n	800554c <__mcmp+0x28>
 800552e:	f100 0314 	add.w	r3, r0, #20
 8005532:	3114      	adds	r1, #20
 8005534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800553c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005544:	42a5      	cmp	r5, r4
 8005546:	d003      	beq.n	8005550 <__mcmp+0x2c>
 8005548:	d305      	bcc.n	8005556 <__mcmp+0x32>
 800554a:	2201      	movs	r2, #1
 800554c:	4610      	mov	r0, r2
 800554e:	bd30      	pop	{r4, r5, pc}
 8005550:	4283      	cmp	r3, r0
 8005552:	d3f3      	bcc.n	800553c <__mcmp+0x18>
 8005554:	e7fa      	b.n	800554c <__mcmp+0x28>
 8005556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555a:	e7f7      	b.n	800554c <__mcmp+0x28>

0800555c <__mdiff>:
 800555c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	4606      	mov	r6, r0
 8005564:	4611      	mov	r1, r2
 8005566:	4620      	mov	r0, r4
 8005568:	4690      	mov	r8, r2
 800556a:	f7ff ffdb 	bl	8005524 <__mcmp>
 800556e:	1e05      	subs	r5, r0, #0
 8005570:	d110      	bne.n	8005594 <__mdiff+0x38>
 8005572:	4629      	mov	r1, r5
 8005574:	4630      	mov	r0, r6
 8005576:	f7ff fd59 	bl	800502c <_Balloc>
 800557a:	b930      	cbnz	r0, 800558a <__mdiff+0x2e>
 800557c:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <__mdiff+0x10c>)
 800557e:	4602      	mov	r2, r0
 8005580:	f240 2137 	movw	r1, #567	; 0x237
 8005584:	4839      	ldr	r0, [pc, #228]	; (800566c <__mdiff+0x110>)
 8005586:	f000 fce5 	bl	8005f54 <__assert_func>
 800558a:	2301      	movs	r3, #1
 800558c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	bfa4      	itt	ge
 8005596:	4643      	movge	r3, r8
 8005598:	46a0      	movge	r8, r4
 800559a:	4630      	mov	r0, r6
 800559c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80055a0:	bfa6      	itte	ge
 80055a2:	461c      	movge	r4, r3
 80055a4:	2500      	movge	r5, #0
 80055a6:	2501      	movlt	r5, #1
 80055a8:	f7ff fd40 	bl	800502c <_Balloc>
 80055ac:	b920      	cbnz	r0, 80055b8 <__mdiff+0x5c>
 80055ae:	4b2e      	ldr	r3, [pc, #184]	; (8005668 <__mdiff+0x10c>)
 80055b0:	4602      	mov	r2, r0
 80055b2:	f240 2145 	movw	r1, #581	; 0x245
 80055b6:	e7e5      	b.n	8005584 <__mdiff+0x28>
 80055b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80055bc:	6926      	ldr	r6, [r4, #16]
 80055be:	60c5      	str	r5, [r0, #12]
 80055c0:	f104 0914 	add.w	r9, r4, #20
 80055c4:	f108 0514 	add.w	r5, r8, #20
 80055c8:	f100 0e14 	add.w	lr, r0, #20
 80055cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80055d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055d4:	f108 0210 	add.w	r2, r8, #16
 80055d8:	46f2      	mov	sl, lr
 80055da:	2100      	movs	r1, #0
 80055dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80055e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80055e4:	fa11 f88b 	uxtah	r8, r1, fp
 80055e8:	b299      	uxth	r1, r3
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	eba8 0801 	sub.w	r8, r8, r1
 80055f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80055f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80055f8:	fa1f f888 	uxth.w	r8, r8
 80055fc:	1419      	asrs	r1, r3, #16
 80055fe:	454e      	cmp	r6, r9
 8005600:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005604:	f84a 3b04 	str.w	r3, [sl], #4
 8005608:	d8e8      	bhi.n	80055dc <__mdiff+0x80>
 800560a:	1b33      	subs	r3, r6, r4
 800560c:	3b15      	subs	r3, #21
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	3304      	adds	r3, #4
 8005614:	3415      	adds	r4, #21
 8005616:	42a6      	cmp	r6, r4
 8005618:	bf38      	it	cc
 800561a:	2304      	movcc	r3, #4
 800561c:	441d      	add	r5, r3
 800561e:	4473      	add	r3, lr
 8005620:	469e      	mov	lr, r3
 8005622:	462e      	mov	r6, r5
 8005624:	4566      	cmp	r6, ip
 8005626:	d30e      	bcc.n	8005646 <__mdiff+0xea>
 8005628:	f10c 0203 	add.w	r2, ip, #3
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	f022 0203 	bic.w	r2, r2, #3
 8005632:	3d03      	subs	r5, #3
 8005634:	45ac      	cmp	ip, r5
 8005636:	bf38      	it	cc
 8005638:	2200      	movcc	r2, #0
 800563a:	4413      	add	r3, r2
 800563c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005640:	b17a      	cbz	r2, 8005662 <__mdiff+0x106>
 8005642:	6107      	str	r7, [r0, #16]
 8005644:	e7a4      	b.n	8005590 <__mdiff+0x34>
 8005646:	f856 8b04 	ldr.w	r8, [r6], #4
 800564a:	fa11 f288 	uxtah	r2, r1, r8
 800564e:	1414      	asrs	r4, r2, #16
 8005650:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005654:	b292      	uxth	r2, r2
 8005656:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800565a:	f84e 2b04 	str.w	r2, [lr], #4
 800565e:	1421      	asrs	r1, r4, #16
 8005660:	e7e0      	b.n	8005624 <__mdiff+0xc8>
 8005662:	3f01      	subs	r7, #1
 8005664:	e7ea      	b.n	800563c <__mdiff+0xe0>
 8005666:	bf00      	nop
 8005668:	08006350 	.word	0x08006350
 800566c:	08006361 	.word	0x08006361

08005670 <__d2b>:
 8005670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005674:	460f      	mov	r7, r1
 8005676:	2101      	movs	r1, #1
 8005678:	ec59 8b10 	vmov	r8, r9, d0
 800567c:	4616      	mov	r6, r2
 800567e:	f7ff fcd5 	bl	800502c <_Balloc>
 8005682:	4604      	mov	r4, r0
 8005684:	b930      	cbnz	r0, 8005694 <__d2b+0x24>
 8005686:	4602      	mov	r2, r0
 8005688:	4b24      	ldr	r3, [pc, #144]	; (800571c <__d2b+0xac>)
 800568a:	4825      	ldr	r0, [pc, #148]	; (8005720 <__d2b+0xb0>)
 800568c:	f240 310f 	movw	r1, #783	; 0x30f
 8005690:	f000 fc60 	bl	8005f54 <__assert_func>
 8005694:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800569c:	bb2d      	cbnz	r5, 80056ea <__d2b+0x7a>
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	f1b8 0300 	subs.w	r3, r8, #0
 80056a4:	d026      	beq.n	80056f4 <__d2b+0x84>
 80056a6:	4668      	mov	r0, sp
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	f7ff fd87 	bl	80051bc <__lo0bits>
 80056ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80056b2:	b1e8      	cbz	r0, 80056f0 <__d2b+0x80>
 80056b4:	f1c0 0320 	rsb	r3, r0, #32
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	430b      	orrs	r3, r1
 80056be:	40c2      	lsrs	r2, r0
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	9201      	str	r2, [sp, #4]
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	61a3      	str	r3, [r4, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf14      	ite	ne
 80056cc:	2202      	movne	r2, #2
 80056ce:	2201      	moveq	r2, #1
 80056d0:	6122      	str	r2, [r4, #16]
 80056d2:	b1bd      	cbz	r5, 8005704 <__d2b+0x94>
 80056d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056d8:	4405      	add	r5, r0
 80056da:	603d      	str	r5, [r7, #0]
 80056dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4620      	mov	r0, r4
 80056e4:	b003      	add	sp, #12
 80056e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ee:	e7d6      	b.n	800569e <__d2b+0x2e>
 80056f0:	6161      	str	r1, [r4, #20]
 80056f2:	e7e7      	b.n	80056c4 <__d2b+0x54>
 80056f4:	a801      	add	r0, sp, #4
 80056f6:	f7ff fd61 	bl	80051bc <__lo0bits>
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	6163      	str	r3, [r4, #20]
 80056fe:	3020      	adds	r0, #32
 8005700:	2201      	movs	r2, #1
 8005702:	e7e5      	b.n	80056d0 <__d2b+0x60>
 8005704:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005708:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800570c:	6038      	str	r0, [r7, #0]
 800570e:	6918      	ldr	r0, [r3, #16]
 8005710:	f7ff fd34 	bl	800517c <__hi0bits>
 8005714:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005718:	e7e2      	b.n	80056e0 <__d2b+0x70>
 800571a:	bf00      	nop
 800571c:	08006350 	.word	0x08006350
 8005720:	08006361 	.word	0x08006361

08005724 <__ssputs_r>:
 8005724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	688e      	ldr	r6, [r1, #8]
 800572a:	461f      	mov	r7, r3
 800572c:	42be      	cmp	r6, r7
 800572e:	680b      	ldr	r3, [r1, #0]
 8005730:	4682      	mov	sl, r0
 8005732:	460c      	mov	r4, r1
 8005734:	4690      	mov	r8, r2
 8005736:	d82c      	bhi.n	8005792 <__ssputs_r+0x6e>
 8005738:	898a      	ldrh	r2, [r1, #12]
 800573a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800573e:	d026      	beq.n	800578e <__ssputs_r+0x6a>
 8005740:	6965      	ldr	r5, [r4, #20]
 8005742:	6909      	ldr	r1, [r1, #16]
 8005744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005748:	eba3 0901 	sub.w	r9, r3, r1
 800574c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005750:	1c7b      	adds	r3, r7, #1
 8005752:	444b      	add	r3, r9
 8005754:	106d      	asrs	r5, r5, #1
 8005756:	429d      	cmp	r5, r3
 8005758:	bf38      	it	cc
 800575a:	461d      	movcc	r5, r3
 800575c:	0553      	lsls	r3, r2, #21
 800575e:	d527      	bpl.n	80057b0 <__ssputs_r+0x8c>
 8005760:	4629      	mov	r1, r5
 8005762:	f7ff fbd7 	bl	8004f14 <_malloc_r>
 8005766:	4606      	mov	r6, r0
 8005768:	b360      	cbz	r0, 80057c4 <__ssputs_r+0xa0>
 800576a:	6921      	ldr	r1, [r4, #16]
 800576c:	464a      	mov	r2, r9
 800576e:	f000 fbe3 	bl	8005f38 <memcpy>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	6126      	str	r6, [r4, #16]
 8005780:	6165      	str	r5, [r4, #20]
 8005782:	444e      	add	r6, r9
 8005784:	eba5 0509 	sub.w	r5, r5, r9
 8005788:	6026      	str	r6, [r4, #0]
 800578a:	60a5      	str	r5, [r4, #8]
 800578c:	463e      	mov	r6, r7
 800578e:	42be      	cmp	r6, r7
 8005790:	d900      	bls.n	8005794 <__ssputs_r+0x70>
 8005792:	463e      	mov	r6, r7
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	4632      	mov	r2, r6
 8005798:	4641      	mov	r1, r8
 800579a:	f000 fba3 	bl	8005ee4 <memmove>
 800579e:	68a3      	ldr	r3, [r4, #8]
 80057a0:	1b9b      	subs	r3, r3, r6
 80057a2:	60a3      	str	r3, [r4, #8]
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	4433      	add	r3, r6
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	2000      	movs	r0, #0
 80057ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b0:	462a      	mov	r2, r5
 80057b2:	f000 fc15 	bl	8005fe0 <_realloc_r>
 80057b6:	4606      	mov	r6, r0
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d1e0      	bne.n	800577e <__ssputs_r+0x5a>
 80057bc:	6921      	ldr	r1, [r4, #16]
 80057be:	4650      	mov	r0, sl
 80057c0:	f7ff fb34 	bl	8004e2c <_free_r>
 80057c4:	230c      	movs	r3, #12
 80057c6:	f8ca 3000 	str.w	r3, [sl]
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d0:	81a3      	strh	r3, [r4, #12]
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d6:	e7e9      	b.n	80057ac <__ssputs_r+0x88>

080057d8 <_svfiprintf_r>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	4698      	mov	r8, r3
 80057de:	898b      	ldrh	r3, [r1, #12]
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	b09d      	sub	sp, #116	; 0x74
 80057e4:	4607      	mov	r7, r0
 80057e6:	460d      	mov	r5, r1
 80057e8:	4614      	mov	r4, r2
 80057ea:	d50e      	bpl.n	800580a <_svfiprintf_r+0x32>
 80057ec:	690b      	ldr	r3, [r1, #16]
 80057ee:	b963      	cbnz	r3, 800580a <_svfiprintf_r+0x32>
 80057f0:	2140      	movs	r1, #64	; 0x40
 80057f2:	f7ff fb8f 	bl	8004f14 <_malloc_r>
 80057f6:	6028      	str	r0, [r5, #0]
 80057f8:	6128      	str	r0, [r5, #16]
 80057fa:	b920      	cbnz	r0, 8005806 <_svfiprintf_r+0x2e>
 80057fc:	230c      	movs	r3, #12
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005804:	e0d0      	b.n	80059a8 <_svfiprintf_r+0x1d0>
 8005806:	2340      	movs	r3, #64	; 0x40
 8005808:	616b      	str	r3, [r5, #20]
 800580a:	2300      	movs	r3, #0
 800580c:	9309      	str	r3, [sp, #36]	; 0x24
 800580e:	2320      	movs	r3, #32
 8005810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005814:	f8cd 800c 	str.w	r8, [sp, #12]
 8005818:	2330      	movs	r3, #48	; 0x30
 800581a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80059c0 <_svfiprintf_r+0x1e8>
 800581e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005822:	f04f 0901 	mov.w	r9, #1
 8005826:	4623      	mov	r3, r4
 8005828:	469a      	mov	sl, r3
 800582a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582e:	b10a      	cbz	r2, 8005834 <_svfiprintf_r+0x5c>
 8005830:	2a25      	cmp	r2, #37	; 0x25
 8005832:	d1f9      	bne.n	8005828 <_svfiprintf_r+0x50>
 8005834:	ebba 0b04 	subs.w	fp, sl, r4
 8005838:	d00b      	beq.n	8005852 <_svfiprintf_r+0x7a>
 800583a:	465b      	mov	r3, fp
 800583c:	4622      	mov	r2, r4
 800583e:	4629      	mov	r1, r5
 8005840:	4638      	mov	r0, r7
 8005842:	f7ff ff6f 	bl	8005724 <__ssputs_r>
 8005846:	3001      	adds	r0, #1
 8005848:	f000 80a9 	beq.w	800599e <_svfiprintf_r+0x1c6>
 800584c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584e:	445a      	add	r2, fp
 8005850:	9209      	str	r2, [sp, #36]	; 0x24
 8005852:	f89a 3000 	ldrb.w	r3, [sl]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 80a1 	beq.w	800599e <_svfiprintf_r+0x1c6>
 800585c:	2300      	movs	r3, #0
 800585e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005866:	f10a 0a01 	add.w	sl, sl, #1
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005872:	931a      	str	r3, [sp, #104]	; 0x68
 8005874:	4654      	mov	r4, sl
 8005876:	2205      	movs	r2, #5
 8005878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587c:	4850      	ldr	r0, [pc, #320]	; (80059c0 <_svfiprintf_r+0x1e8>)
 800587e:	f7fa fca7 	bl	80001d0 <memchr>
 8005882:	9a04      	ldr	r2, [sp, #16]
 8005884:	b9d8      	cbnz	r0, 80058be <_svfiprintf_r+0xe6>
 8005886:	06d0      	lsls	r0, r2, #27
 8005888:	bf44      	itt	mi
 800588a:	2320      	movmi	r3, #32
 800588c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005890:	0711      	lsls	r1, r2, #28
 8005892:	bf44      	itt	mi
 8005894:	232b      	movmi	r3, #43	; 0x2b
 8005896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800589a:	f89a 3000 	ldrb.w	r3, [sl]
 800589e:	2b2a      	cmp	r3, #42	; 0x2a
 80058a0:	d015      	beq.n	80058ce <_svfiprintf_r+0xf6>
 80058a2:	9a07      	ldr	r2, [sp, #28]
 80058a4:	4654      	mov	r4, sl
 80058a6:	2000      	movs	r0, #0
 80058a8:	f04f 0c0a 	mov.w	ip, #10
 80058ac:	4621      	mov	r1, r4
 80058ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b2:	3b30      	subs	r3, #48	; 0x30
 80058b4:	2b09      	cmp	r3, #9
 80058b6:	d94d      	bls.n	8005954 <_svfiprintf_r+0x17c>
 80058b8:	b1b0      	cbz	r0, 80058e8 <_svfiprintf_r+0x110>
 80058ba:	9207      	str	r2, [sp, #28]
 80058bc:	e014      	b.n	80058e8 <_svfiprintf_r+0x110>
 80058be:	eba0 0308 	sub.w	r3, r0, r8
 80058c2:	fa09 f303 	lsl.w	r3, r9, r3
 80058c6:	4313      	orrs	r3, r2
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	46a2      	mov	sl, r4
 80058cc:	e7d2      	b.n	8005874 <_svfiprintf_r+0x9c>
 80058ce:	9b03      	ldr	r3, [sp, #12]
 80058d0:	1d19      	adds	r1, r3, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	9103      	str	r1, [sp, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfbb      	ittet	lt
 80058da:	425b      	neglt	r3, r3
 80058dc:	f042 0202 	orrlt.w	r2, r2, #2
 80058e0:	9307      	strge	r3, [sp, #28]
 80058e2:	9307      	strlt	r3, [sp, #28]
 80058e4:	bfb8      	it	lt
 80058e6:	9204      	strlt	r2, [sp, #16]
 80058e8:	7823      	ldrb	r3, [r4, #0]
 80058ea:	2b2e      	cmp	r3, #46	; 0x2e
 80058ec:	d10c      	bne.n	8005908 <_svfiprintf_r+0x130>
 80058ee:	7863      	ldrb	r3, [r4, #1]
 80058f0:	2b2a      	cmp	r3, #42	; 0x2a
 80058f2:	d134      	bne.n	800595e <_svfiprintf_r+0x186>
 80058f4:	9b03      	ldr	r3, [sp, #12]
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	9203      	str	r2, [sp, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bfb8      	it	lt
 8005900:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005904:	3402      	adds	r4, #2
 8005906:	9305      	str	r3, [sp, #20]
 8005908:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80059d0 <_svfiprintf_r+0x1f8>
 800590c:	7821      	ldrb	r1, [r4, #0]
 800590e:	2203      	movs	r2, #3
 8005910:	4650      	mov	r0, sl
 8005912:	f7fa fc5d 	bl	80001d0 <memchr>
 8005916:	b138      	cbz	r0, 8005928 <_svfiprintf_r+0x150>
 8005918:	9b04      	ldr	r3, [sp, #16]
 800591a:	eba0 000a 	sub.w	r0, r0, sl
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	4082      	lsls	r2, r0
 8005922:	4313      	orrs	r3, r2
 8005924:	3401      	adds	r4, #1
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592c:	4825      	ldr	r0, [pc, #148]	; (80059c4 <_svfiprintf_r+0x1ec>)
 800592e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005932:	2206      	movs	r2, #6
 8005934:	f7fa fc4c 	bl	80001d0 <memchr>
 8005938:	2800      	cmp	r0, #0
 800593a:	d038      	beq.n	80059ae <_svfiprintf_r+0x1d6>
 800593c:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <_svfiprintf_r+0x1f0>)
 800593e:	bb1b      	cbnz	r3, 8005988 <_svfiprintf_r+0x1b0>
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	3307      	adds	r3, #7
 8005944:	f023 0307 	bic.w	r3, r3, #7
 8005948:	3308      	adds	r3, #8
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594e:	4433      	add	r3, r6
 8005950:	9309      	str	r3, [sp, #36]	; 0x24
 8005952:	e768      	b.n	8005826 <_svfiprintf_r+0x4e>
 8005954:	fb0c 3202 	mla	r2, ip, r2, r3
 8005958:	460c      	mov	r4, r1
 800595a:	2001      	movs	r0, #1
 800595c:	e7a6      	b.n	80058ac <_svfiprintf_r+0xd4>
 800595e:	2300      	movs	r3, #0
 8005960:	3401      	adds	r4, #1
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	4619      	mov	r1, r3
 8005966:	f04f 0c0a 	mov.w	ip, #10
 800596a:	4620      	mov	r0, r4
 800596c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005970:	3a30      	subs	r2, #48	; 0x30
 8005972:	2a09      	cmp	r2, #9
 8005974:	d903      	bls.n	800597e <_svfiprintf_r+0x1a6>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0c6      	beq.n	8005908 <_svfiprintf_r+0x130>
 800597a:	9105      	str	r1, [sp, #20]
 800597c:	e7c4      	b.n	8005908 <_svfiprintf_r+0x130>
 800597e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005982:	4604      	mov	r4, r0
 8005984:	2301      	movs	r3, #1
 8005986:	e7f0      	b.n	800596a <_svfiprintf_r+0x192>
 8005988:	ab03      	add	r3, sp, #12
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	462a      	mov	r2, r5
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <_svfiprintf_r+0x1f4>)
 8005990:	a904      	add	r1, sp, #16
 8005992:	4638      	mov	r0, r7
 8005994:	f7fd fe52 	bl	800363c <_printf_float>
 8005998:	1c42      	adds	r2, r0, #1
 800599a:	4606      	mov	r6, r0
 800599c:	d1d6      	bne.n	800594c <_svfiprintf_r+0x174>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	065b      	lsls	r3, r3, #25
 80059a2:	f53f af2d 	bmi.w	8005800 <_svfiprintf_r+0x28>
 80059a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a8:	b01d      	add	sp, #116	; 0x74
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	ab03      	add	r3, sp, #12
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	462a      	mov	r2, r5
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <_svfiprintf_r+0x1f4>)
 80059b6:	a904      	add	r1, sp, #16
 80059b8:	4638      	mov	r0, r7
 80059ba:	f7fe f8e3 	bl	8003b84 <_printf_i>
 80059be:	e7eb      	b.n	8005998 <_svfiprintf_r+0x1c0>
 80059c0:	080064bc 	.word	0x080064bc
 80059c4:	080064c6 	.word	0x080064c6
 80059c8:	0800363d 	.word	0x0800363d
 80059cc:	08005725 	.word	0x08005725
 80059d0:	080064c2 	.word	0x080064c2

080059d4 <__sfputc_r>:
 80059d4:	6893      	ldr	r3, [r2, #8]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	b410      	push	{r4}
 80059dc:	6093      	str	r3, [r2, #8]
 80059de:	da08      	bge.n	80059f2 <__sfputc_r+0x1e>
 80059e0:	6994      	ldr	r4, [r2, #24]
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	db01      	blt.n	80059ea <__sfputc_r+0x16>
 80059e6:	290a      	cmp	r1, #10
 80059e8:	d103      	bne.n	80059f2 <__sfputc_r+0x1e>
 80059ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ee:	f000 b9e3 	b.w	8005db8 <__swbuf_r>
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	1c58      	adds	r0, r3, #1
 80059f6:	6010      	str	r0, [r2, #0]
 80059f8:	7019      	strb	r1, [r3, #0]
 80059fa:	4608      	mov	r0, r1
 80059fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <__sfputs_r>:
 8005a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	18d5      	adds	r5, r2, r3
 8005a0c:	42ac      	cmp	r4, r5
 8005a0e:	d101      	bne.n	8005a14 <__sfputs_r+0x12>
 8005a10:	2000      	movs	r0, #0
 8005a12:	e007      	b.n	8005a24 <__sfputs_r+0x22>
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	463a      	mov	r2, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ffda 	bl	80059d4 <__sfputc_r>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d1f3      	bne.n	8005a0c <__sfputs_r+0xa>
 8005a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a28 <_vfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	b09d      	sub	sp, #116	; 0x74
 8005a30:	4614      	mov	r4, r2
 8005a32:	4698      	mov	r8, r3
 8005a34:	4606      	mov	r6, r0
 8005a36:	b118      	cbz	r0, 8005a40 <_vfiprintf_r+0x18>
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <_vfiprintf_r+0x18>
 8005a3c:	f7fe fa50 	bl	8003ee0 <__sinit>
 8005a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a42:	07d9      	lsls	r1, r3, #31
 8005a44:	d405      	bmi.n	8005a52 <_vfiprintf_r+0x2a>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	059a      	lsls	r2, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_vfiprintf_r+0x2a>
 8005a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4e:	f7fe fb70 	bl	8004132 <__retarget_lock_acquire_recursive>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	071b      	lsls	r3, r3, #28
 8005a56:	d501      	bpl.n	8005a5c <_vfiprintf_r+0x34>
 8005a58:	692b      	ldr	r3, [r5, #16]
 8005a5a:	b99b      	cbnz	r3, 8005a84 <_vfiprintf_r+0x5c>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f000 f9e8 	bl	8005e34 <__swsetup_r>
 8005a64:	b170      	cbz	r0, 8005a84 <_vfiprintf_r+0x5c>
 8005a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a68:	07dc      	lsls	r4, r3, #31
 8005a6a:	d504      	bpl.n	8005a76 <_vfiprintf_r+0x4e>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a70:	b01d      	add	sp, #116	; 0x74
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	0598      	lsls	r0, r3, #22
 8005a7a:	d4f7      	bmi.n	8005a6c <_vfiprintf_r+0x44>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7e:	f7fe fb59 	bl	8004134 <__retarget_lock_release_recursive>
 8005a82:	e7f3      	b.n	8005a6c <_vfiprintf_r+0x44>
 8005a84:	2300      	movs	r3, #0
 8005a86:	9309      	str	r3, [sp, #36]	; 0x24
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a92:	2330      	movs	r3, #48	; 0x30
 8005a94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c48 <_vfiprintf_r+0x220>
 8005a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a9c:	f04f 0901 	mov.w	r9, #1
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	469a      	mov	sl, r3
 8005aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa8:	b10a      	cbz	r2, 8005aae <_vfiprintf_r+0x86>
 8005aaa:	2a25      	cmp	r2, #37	; 0x25
 8005aac:	d1f9      	bne.n	8005aa2 <_vfiprintf_r+0x7a>
 8005aae:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab2:	d00b      	beq.n	8005acc <_vfiprintf_r+0xa4>
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7ff ffa1 	bl	8005a02 <__sfputs_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f000 80a9 	beq.w	8005c18 <_vfiprintf_r+0x1f0>
 8005ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac8:	445a      	add	r2, fp
 8005aca:	9209      	str	r2, [sp, #36]	; 0x24
 8005acc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80a1 	beq.w	8005c18 <_vfiprintf_r+0x1f0>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae0:	f10a 0a01 	add.w	sl, sl, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aec:	931a      	str	r3, [sp, #104]	; 0x68
 8005aee:	4654      	mov	r4, sl
 8005af0:	2205      	movs	r2, #5
 8005af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af6:	4854      	ldr	r0, [pc, #336]	; (8005c48 <_vfiprintf_r+0x220>)
 8005af8:	f7fa fb6a 	bl	80001d0 <memchr>
 8005afc:	9a04      	ldr	r2, [sp, #16]
 8005afe:	b9d8      	cbnz	r0, 8005b38 <_vfiprintf_r+0x110>
 8005b00:	06d1      	lsls	r1, r2, #27
 8005b02:	bf44      	itt	mi
 8005b04:	2320      	movmi	r3, #32
 8005b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0a:	0713      	lsls	r3, r2, #28
 8005b0c:	bf44      	itt	mi
 8005b0e:	232b      	movmi	r3, #43	; 0x2b
 8005b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b14:	f89a 3000 	ldrb.w	r3, [sl]
 8005b18:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1a:	d015      	beq.n	8005b48 <_vfiprintf_r+0x120>
 8005b1c:	9a07      	ldr	r2, [sp, #28]
 8005b1e:	4654      	mov	r4, sl
 8005b20:	2000      	movs	r0, #0
 8005b22:	f04f 0c0a 	mov.w	ip, #10
 8005b26:	4621      	mov	r1, r4
 8005b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2c:	3b30      	subs	r3, #48	; 0x30
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d94d      	bls.n	8005bce <_vfiprintf_r+0x1a6>
 8005b32:	b1b0      	cbz	r0, 8005b62 <_vfiprintf_r+0x13a>
 8005b34:	9207      	str	r2, [sp, #28]
 8005b36:	e014      	b.n	8005b62 <_vfiprintf_r+0x13a>
 8005b38:	eba0 0308 	sub.w	r3, r0, r8
 8005b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	46a2      	mov	sl, r4
 8005b46:	e7d2      	b.n	8005aee <_vfiprintf_r+0xc6>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	1d19      	adds	r1, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	9103      	str	r1, [sp, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bfbb      	ittet	lt
 8005b54:	425b      	neglt	r3, r3
 8005b56:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5a:	9307      	strge	r3, [sp, #28]
 8005b5c:	9307      	strlt	r3, [sp, #28]
 8005b5e:	bfb8      	it	lt
 8005b60:	9204      	strlt	r2, [sp, #16]
 8005b62:	7823      	ldrb	r3, [r4, #0]
 8005b64:	2b2e      	cmp	r3, #46	; 0x2e
 8005b66:	d10c      	bne.n	8005b82 <_vfiprintf_r+0x15a>
 8005b68:	7863      	ldrb	r3, [r4, #1]
 8005b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6c:	d134      	bne.n	8005bd8 <_vfiprintf_r+0x1b0>
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	9203      	str	r2, [sp, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfb8      	it	lt
 8005b7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b7e:	3402      	adds	r4, #2
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c58 <_vfiprintf_r+0x230>
 8005b86:	7821      	ldrb	r1, [r4, #0]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	f7fa fb20 	bl	80001d0 <memchr>
 8005b90:	b138      	cbz	r0, 8005ba2 <_vfiprintf_r+0x17a>
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	eba0 000a 	sub.w	r0, r0, sl
 8005b98:	2240      	movs	r2, #64	; 0x40
 8005b9a:	4082      	lsls	r2, r0
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	3401      	adds	r4, #1
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba6:	4829      	ldr	r0, [pc, #164]	; (8005c4c <_vfiprintf_r+0x224>)
 8005ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bac:	2206      	movs	r2, #6
 8005bae:	f7fa fb0f 	bl	80001d0 <memchr>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d03f      	beq.n	8005c36 <_vfiprintf_r+0x20e>
 8005bb6:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <_vfiprintf_r+0x228>)
 8005bb8:	bb1b      	cbnz	r3, 8005c02 <_vfiprintf_r+0x1da>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	3307      	adds	r3, #7
 8005bbe:	f023 0307 	bic.w	r3, r3, #7
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc8:	443b      	add	r3, r7
 8005bca:	9309      	str	r3, [sp, #36]	; 0x24
 8005bcc:	e768      	b.n	8005aa0 <_vfiprintf_r+0x78>
 8005bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e7a6      	b.n	8005b26 <_vfiprintf_r+0xfe>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	3401      	adds	r4, #1
 8005bdc:	9305      	str	r3, [sp, #20]
 8005bde:	4619      	mov	r1, r3
 8005be0:	f04f 0c0a 	mov.w	ip, #10
 8005be4:	4620      	mov	r0, r4
 8005be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bea:	3a30      	subs	r2, #48	; 0x30
 8005bec:	2a09      	cmp	r2, #9
 8005bee:	d903      	bls.n	8005bf8 <_vfiprintf_r+0x1d0>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0c6      	beq.n	8005b82 <_vfiprintf_r+0x15a>
 8005bf4:	9105      	str	r1, [sp, #20]
 8005bf6:	e7c4      	b.n	8005b82 <_vfiprintf_r+0x15a>
 8005bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7f0      	b.n	8005be4 <_vfiprintf_r+0x1bc>
 8005c02:	ab03      	add	r3, sp, #12
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	462a      	mov	r2, r5
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <_vfiprintf_r+0x22c>)
 8005c0a:	a904      	add	r1, sp, #16
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7fd fd15 	bl	800363c <_printf_float>
 8005c12:	4607      	mov	r7, r0
 8005c14:	1c78      	adds	r0, r7, #1
 8005c16:	d1d6      	bne.n	8005bc6 <_vfiprintf_r+0x19e>
 8005c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c1a:	07d9      	lsls	r1, r3, #31
 8005c1c:	d405      	bmi.n	8005c2a <_vfiprintf_r+0x202>
 8005c1e:	89ab      	ldrh	r3, [r5, #12]
 8005c20:	059a      	lsls	r2, r3, #22
 8005c22:	d402      	bmi.n	8005c2a <_vfiprintf_r+0x202>
 8005c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c26:	f7fe fa85 	bl	8004134 <__retarget_lock_release_recursive>
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	065b      	lsls	r3, r3, #25
 8005c2e:	f53f af1d 	bmi.w	8005a6c <_vfiprintf_r+0x44>
 8005c32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c34:	e71c      	b.n	8005a70 <_vfiprintf_r+0x48>
 8005c36:	ab03      	add	r3, sp, #12
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <_vfiprintf_r+0x22c>)
 8005c3e:	a904      	add	r1, sp, #16
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7fd ff9f 	bl	8003b84 <_printf_i>
 8005c46:	e7e4      	b.n	8005c12 <_vfiprintf_r+0x1ea>
 8005c48:	080064bc 	.word	0x080064bc
 8005c4c:	080064c6 	.word	0x080064c6
 8005c50:	0800363d 	.word	0x0800363d
 8005c54:	08005a03 	.word	0x08005a03
 8005c58:	080064c2 	.word	0x080064c2

08005c5c <__sflush_r>:
 8005c5c:	898a      	ldrh	r2, [r1, #12]
 8005c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c62:	4605      	mov	r5, r0
 8005c64:	0710      	lsls	r0, r2, #28
 8005c66:	460c      	mov	r4, r1
 8005c68:	d458      	bmi.n	8005d1c <__sflush_r+0xc0>
 8005c6a:	684b      	ldr	r3, [r1, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dc05      	bgt.n	8005c7c <__sflush_r+0x20>
 8005c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dc02      	bgt.n	8005c7c <__sflush_r+0x20>
 8005c76:	2000      	movs	r0, #0
 8005c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	d0f9      	beq.n	8005c76 <__sflush_r+0x1a>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c88:	682f      	ldr	r7, [r5, #0]
 8005c8a:	6a21      	ldr	r1, [r4, #32]
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	d032      	beq.n	8005cf6 <__sflush_r+0x9a>
 8005c90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	075a      	lsls	r2, r3, #29
 8005c96:	d505      	bpl.n	8005ca4 <__sflush_r+0x48>
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	1ac0      	subs	r0, r0, r3
 8005c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c9e:	b10b      	cbz	r3, 8005ca4 <__sflush_r+0x48>
 8005ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ca2:	1ac0      	subs	r0, r0, r3
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005caa:	6a21      	ldr	r1, [r4, #32]
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b0      	blx	r6
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	d106      	bne.n	8005cc4 <__sflush_r+0x68>
 8005cb6:	6829      	ldr	r1, [r5, #0]
 8005cb8:	291d      	cmp	r1, #29
 8005cba:	d82b      	bhi.n	8005d14 <__sflush_r+0xb8>
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <__sflush_r+0x108>)
 8005cbe:	410a      	asrs	r2, r1
 8005cc0:	07d6      	lsls	r6, r2, #31
 8005cc2:	d427      	bmi.n	8005d14 <__sflush_r+0xb8>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	6062      	str	r2, [r4, #4]
 8005cc8:	04d9      	lsls	r1, r3, #19
 8005cca:	6922      	ldr	r2, [r4, #16]
 8005ccc:	6022      	str	r2, [r4, #0]
 8005cce:	d504      	bpl.n	8005cda <__sflush_r+0x7e>
 8005cd0:	1c42      	adds	r2, r0, #1
 8005cd2:	d101      	bne.n	8005cd8 <__sflush_r+0x7c>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b903      	cbnz	r3, 8005cda <__sflush_r+0x7e>
 8005cd8:	6560      	str	r0, [r4, #84]	; 0x54
 8005cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cdc:	602f      	str	r7, [r5, #0]
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	d0c9      	beq.n	8005c76 <__sflush_r+0x1a>
 8005ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	d002      	beq.n	8005cf0 <__sflush_r+0x94>
 8005cea:	4628      	mov	r0, r5
 8005cec:	f7ff f89e 	bl	8004e2c <_free_r>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8005cf4:	e7c0      	b.n	8005c78 <__sflush_r+0x1c>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b0      	blx	r6
 8005cfc:	1c41      	adds	r1, r0, #1
 8005cfe:	d1c8      	bne.n	8005c92 <__sflush_r+0x36>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0c5      	beq.n	8005c92 <__sflush_r+0x36>
 8005d06:	2b1d      	cmp	r3, #29
 8005d08:	d001      	beq.n	8005d0e <__sflush_r+0xb2>
 8005d0a:	2b16      	cmp	r3, #22
 8005d0c:	d101      	bne.n	8005d12 <__sflush_r+0xb6>
 8005d0e:	602f      	str	r7, [r5, #0]
 8005d10:	e7b1      	b.n	8005c76 <__sflush_r+0x1a>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	e7ad      	b.n	8005c78 <__sflush_r+0x1c>
 8005d1c:	690f      	ldr	r7, [r1, #16]
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	d0a9      	beq.n	8005c76 <__sflush_r+0x1a>
 8005d22:	0793      	lsls	r3, r2, #30
 8005d24:	680e      	ldr	r6, [r1, #0]
 8005d26:	bf08      	it	eq
 8005d28:	694b      	ldreq	r3, [r1, #20]
 8005d2a:	600f      	str	r7, [r1, #0]
 8005d2c:	bf18      	it	ne
 8005d2e:	2300      	movne	r3, #0
 8005d30:	eba6 0807 	sub.w	r8, r6, r7
 8005d34:	608b      	str	r3, [r1, #8]
 8005d36:	f1b8 0f00 	cmp.w	r8, #0
 8005d3a:	dd9c      	ble.n	8005c76 <__sflush_r+0x1a>
 8005d3c:	6a21      	ldr	r1, [r4, #32]
 8005d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d40:	4643      	mov	r3, r8
 8005d42:	463a      	mov	r2, r7
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b0      	blx	r6
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	dc06      	bgt.n	8005d5a <__sflush_r+0xfe>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d58:	e78e      	b.n	8005c78 <__sflush_r+0x1c>
 8005d5a:	4407      	add	r7, r0
 8005d5c:	eba8 0800 	sub.w	r8, r8, r0
 8005d60:	e7e9      	b.n	8005d36 <__sflush_r+0xda>
 8005d62:	bf00      	nop
 8005d64:	dfbffffe 	.word	0xdfbffffe

08005d68 <_fflush_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	690b      	ldr	r3, [r1, #16]
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	b913      	cbnz	r3, 8005d78 <_fflush_r+0x10>
 8005d72:	2500      	movs	r5, #0
 8005d74:	4628      	mov	r0, r5
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	b118      	cbz	r0, 8005d82 <_fflush_r+0x1a>
 8005d7a:	6a03      	ldr	r3, [r0, #32]
 8005d7c:	b90b      	cbnz	r3, 8005d82 <_fflush_r+0x1a>
 8005d7e:	f7fe f8af 	bl	8003ee0 <__sinit>
 8005d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f3      	beq.n	8005d72 <_fflush_r+0xa>
 8005d8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d8c:	07d0      	lsls	r0, r2, #31
 8005d8e:	d404      	bmi.n	8005d9a <_fflush_r+0x32>
 8005d90:	0599      	lsls	r1, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_fflush_r+0x32>
 8005d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d96:	f7fe f9cc 	bl	8004132 <__retarget_lock_acquire_recursive>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	f7ff ff5d 	bl	8005c5c <__sflush_r>
 8005da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005da4:	07da      	lsls	r2, r3, #31
 8005da6:	4605      	mov	r5, r0
 8005da8:	d4e4      	bmi.n	8005d74 <_fflush_r+0xc>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	059b      	lsls	r3, r3, #22
 8005dae:	d4e1      	bmi.n	8005d74 <_fflush_r+0xc>
 8005db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db2:	f7fe f9bf 	bl	8004134 <__retarget_lock_release_recursive>
 8005db6:	e7dd      	b.n	8005d74 <_fflush_r+0xc>

08005db8 <__swbuf_r>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	460e      	mov	r6, r1
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	b118      	cbz	r0, 8005dca <__swbuf_r+0x12>
 8005dc2:	6a03      	ldr	r3, [r0, #32]
 8005dc4:	b90b      	cbnz	r3, 8005dca <__swbuf_r+0x12>
 8005dc6:	f7fe f88b 	bl	8003ee0 <__sinit>
 8005dca:	69a3      	ldr	r3, [r4, #24]
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	071a      	lsls	r2, r3, #28
 8005dd2:	d525      	bpl.n	8005e20 <__swbuf_r+0x68>
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	b31b      	cbz	r3, 8005e20 <__swbuf_r+0x68>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	1a98      	subs	r0, r3, r2
 8005dde:	6963      	ldr	r3, [r4, #20]
 8005de0:	b2f6      	uxtb	r6, r6
 8005de2:	4283      	cmp	r3, r0
 8005de4:	4637      	mov	r7, r6
 8005de6:	dc04      	bgt.n	8005df2 <__swbuf_r+0x3a>
 8005de8:	4621      	mov	r1, r4
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7ff ffbc 	bl	8005d68 <_fflush_r>
 8005df0:	b9e0      	cbnz	r0, 8005e2c <__swbuf_r+0x74>
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	701e      	strb	r6, [r3, #0]
 8005e00:	6962      	ldr	r2, [r4, #20]
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d004      	beq.n	8005e12 <__swbuf_r+0x5a>
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	07db      	lsls	r3, r3, #31
 8005e0c:	d506      	bpl.n	8005e1c <__swbuf_r+0x64>
 8005e0e:	2e0a      	cmp	r6, #10
 8005e10:	d104      	bne.n	8005e1c <__swbuf_r+0x64>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7ff ffa7 	bl	8005d68 <_fflush_r>
 8005e1a:	b938      	cbnz	r0, 8005e2c <__swbuf_r+0x74>
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e20:	4621      	mov	r1, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f806 	bl	8005e34 <__swsetup_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0d5      	beq.n	8005dd8 <__swbuf_r+0x20>
 8005e2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e30:	e7f4      	b.n	8005e1c <__swbuf_r+0x64>
	...

08005e34 <__swsetup_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <__swsetup_r+0xac>)
 8005e38:	4605      	mov	r5, r0
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	b118      	cbz	r0, 8005e48 <__swsetup_r+0x14>
 8005e40:	6a03      	ldr	r3, [r0, #32]
 8005e42:	b90b      	cbnz	r3, 8005e48 <__swsetup_r+0x14>
 8005e44:	f7fe f84c 	bl	8003ee0 <__sinit>
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e4e:	0718      	lsls	r0, r3, #28
 8005e50:	d422      	bmi.n	8005e98 <__swsetup_r+0x64>
 8005e52:	06d9      	lsls	r1, r3, #27
 8005e54:	d407      	bmi.n	8005e66 <__swsetup_r+0x32>
 8005e56:	2309      	movs	r3, #9
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e64:	e034      	b.n	8005ed0 <__swsetup_r+0x9c>
 8005e66:	0758      	lsls	r0, r3, #29
 8005e68:	d512      	bpl.n	8005e90 <__swsetup_r+0x5c>
 8005e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e6c:	b141      	cbz	r1, 8005e80 <__swsetup_r+0x4c>
 8005e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e72:	4299      	cmp	r1, r3
 8005e74:	d002      	beq.n	8005e7c <__swsetup_r+0x48>
 8005e76:	4628      	mov	r0, r5
 8005e78:	f7fe ffd8 	bl	8004e2c <_free_r>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6063      	str	r3, [r4, #4]
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f043 0308 	orr.w	r3, r3, #8
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	b94b      	cbnz	r3, 8005eb0 <__swsetup_r+0x7c>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea6:	d003      	beq.n	8005eb0 <__swsetup_r+0x7c>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f90c 	bl	80060c8 <__smakebuf_r>
 8005eb0:	89a0      	ldrh	r0, [r4, #12]
 8005eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb6:	f010 0301 	ands.w	r3, r0, #1
 8005eba:	d00a      	beq.n	8005ed2 <__swsetup_r+0x9e>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60a3      	str	r3, [r4, #8]
 8005ec0:	6963      	ldr	r3, [r4, #20]
 8005ec2:	425b      	negs	r3, r3
 8005ec4:	61a3      	str	r3, [r4, #24]
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	b943      	cbnz	r3, 8005edc <__swsetup_r+0xa8>
 8005eca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ece:	d1c4      	bne.n	8005e5a <__swsetup_r+0x26>
 8005ed0:	bd38      	pop	{r3, r4, r5, pc}
 8005ed2:	0781      	lsls	r1, r0, #30
 8005ed4:	bf58      	it	pl
 8005ed6:	6963      	ldrpl	r3, [r4, #20]
 8005ed8:	60a3      	str	r3, [r4, #8]
 8005eda:	e7f4      	b.n	8005ec6 <__swsetup_r+0x92>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e7f7      	b.n	8005ed0 <__swsetup_r+0x9c>
 8005ee0:	20000064 	.word	0x20000064

08005ee4 <memmove>:
 8005ee4:	4288      	cmp	r0, r1
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	eb01 0402 	add.w	r4, r1, r2
 8005eec:	d902      	bls.n	8005ef4 <memmove+0x10>
 8005eee:	4284      	cmp	r4, r0
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	d807      	bhi.n	8005f04 <memmove+0x20>
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	42a1      	cmp	r1, r4
 8005ef8:	d008      	beq.n	8005f0c <memmove+0x28>
 8005efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f02:	e7f8      	b.n	8005ef6 <memmove+0x12>
 8005f04:	4402      	add	r2, r0
 8005f06:	4601      	mov	r1, r0
 8005f08:	428a      	cmp	r2, r1
 8005f0a:	d100      	bne.n	8005f0e <memmove+0x2a>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f16:	e7f7      	b.n	8005f08 <memmove+0x24>

08005f18 <_sbrk_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d06      	ldr	r5, [pc, #24]	; (8005f34 <_sbrk_r+0x1c>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fb fb06 	bl	8001534 <_sbrk>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_sbrk_r+0x1a>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_sbrk_r+0x1a>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	200003c0 	.word	0x200003c0

08005f38 <memcpy>:
 8005f38:	440a      	add	r2, r1
 8005f3a:	4291      	cmp	r1, r2
 8005f3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f40:	d100      	bne.n	8005f44 <memcpy+0xc>
 8005f42:	4770      	bx	lr
 8005f44:	b510      	push	{r4, lr}
 8005f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4e:	4291      	cmp	r1, r2
 8005f50:	d1f9      	bne.n	8005f46 <memcpy+0xe>
 8005f52:	bd10      	pop	{r4, pc}

08005f54 <__assert_func>:
 8005f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f56:	4614      	mov	r4, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <__assert_func+0x2c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4605      	mov	r5, r0
 8005f60:	68d8      	ldr	r0, [r3, #12]
 8005f62:	b14c      	cbz	r4, 8005f78 <__assert_func+0x24>
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <__assert_func+0x30>)
 8005f66:	9100      	str	r1, [sp, #0]
 8005f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f6c:	4906      	ldr	r1, [pc, #24]	; (8005f88 <__assert_func+0x34>)
 8005f6e:	462b      	mov	r3, r5
 8005f70:	f000 f872 	bl	8006058 <fiprintf>
 8005f74:	f000 f906 	bl	8006184 <abort>
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <__assert_func+0x38>)
 8005f7a:	461c      	mov	r4, r3
 8005f7c:	e7f3      	b.n	8005f66 <__assert_func+0x12>
 8005f7e:	bf00      	nop
 8005f80:	20000064 	.word	0x20000064
 8005f84:	080064d7 	.word	0x080064d7
 8005f88:	080064e4 	.word	0x080064e4
 8005f8c:	08006512 	.word	0x08006512

08005f90 <_calloc_r>:
 8005f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f92:	fba1 2402 	umull	r2, r4, r1, r2
 8005f96:	b94c      	cbnz	r4, 8005fac <_calloc_r+0x1c>
 8005f98:	4611      	mov	r1, r2
 8005f9a:	9201      	str	r2, [sp, #4]
 8005f9c:	f7fe ffba 	bl	8004f14 <_malloc_r>
 8005fa0:	9a01      	ldr	r2, [sp, #4]
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	b930      	cbnz	r0, 8005fb4 <_calloc_r+0x24>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	220c      	movs	r2, #12
 8005fae:	6002      	str	r2, [r0, #0]
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	e7f8      	b.n	8005fa6 <_calloc_r+0x16>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	f7fe f83e 	bl	8004036 <memset>
 8005fba:	e7f4      	b.n	8005fa6 <_calloc_r+0x16>

08005fbc <__ascii_mbtowc>:
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	b901      	cbnz	r1, 8005fc2 <__ascii_mbtowc+0x6>
 8005fc0:	a901      	add	r1, sp, #4
 8005fc2:	b142      	cbz	r2, 8005fd6 <__ascii_mbtowc+0x1a>
 8005fc4:	b14b      	cbz	r3, 8005fda <__ascii_mbtowc+0x1e>
 8005fc6:	7813      	ldrb	r3, [r2, #0]
 8005fc8:	600b      	str	r3, [r1, #0]
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	1e10      	subs	r0, r2, #0
 8005fce:	bf18      	it	ne
 8005fd0:	2001      	movne	r0, #1
 8005fd2:	b002      	add	sp, #8
 8005fd4:	4770      	bx	lr
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	e7fb      	b.n	8005fd2 <__ascii_mbtowc+0x16>
 8005fda:	f06f 0001 	mvn.w	r0, #1
 8005fde:	e7f8      	b.n	8005fd2 <__ascii_mbtowc+0x16>

08005fe0 <_realloc_r>:
 8005fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	460e      	mov	r6, r1
 8005fea:	b921      	cbnz	r1, 8005ff6 <_realloc_r+0x16>
 8005fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	f7fe bf8f 	b.w	8004f14 <_malloc_r>
 8005ff6:	b92a      	cbnz	r2, 8006004 <_realloc_r+0x24>
 8005ff8:	f7fe ff18 	bl	8004e2c <_free_r>
 8005ffc:	4625      	mov	r5, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006004:	f000 f8c5 	bl	8006192 <_malloc_usable_size_r>
 8006008:	4284      	cmp	r4, r0
 800600a:	4607      	mov	r7, r0
 800600c:	d802      	bhi.n	8006014 <_realloc_r+0x34>
 800600e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006012:	d812      	bhi.n	800603a <_realloc_r+0x5a>
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7fe ff7c 	bl	8004f14 <_malloc_r>
 800601c:	4605      	mov	r5, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d0ed      	beq.n	8005ffe <_realloc_r+0x1e>
 8006022:	42bc      	cmp	r4, r7
 8006024:	4622      	mov	r2, r4
 8006026:	4631      	mov	r1, r6
 8006028:	bf28      	it	cs
 800602a:	463a      	movcs	r2, r7
 800602c:	f7ff ff84 	bl	8005f38 <memcpy>
 8006030:	4631      	mov	r1, r6
 8006032:	4640      	mov	r0, r8
 8006034:	f7fe fefa 	bl	8004e2c <_free_r>
 8006038:	e7e1      	b.n	8005ffe <_realloc_r+0x1e>
 800603a:	4635      	mov	r5, r6
 800603c:	e7df      	b.n	8005ffe <_realloc_r+0x1e>

0800603e <__ascii_wctomb>:
 800603e:	b149      	cbz	r1, 8006054 <__ascii_wctomb+0x16>
 8006040:	2aff      	cmp	r2, #255	; 0xff
 8006042:	bf85      	ittet	hi
 8006044:	238a      	movhi	r3, #138	; 0x8a
 8006046:	6003      	strhi	r3, [r0, #0]
 8006048:	700a      	strbls	r2, [r1, #0]
 800604a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800604e:	bf98      	it	ls
 8006050:	2001      	movls	r0, #1
 8006052:	4770      	bx	lr
 8006054:	4608      	mov	r0, r1
 8006056:	4770      	bx	lr

08006058 <fiprintf>:
 8006058:	b40e      	push	{r1, r2, r3}
 800605a:	b503      	push	{r0, r1, lr}
 800605c:	4601      	mov	r1, r0
 800605e:	ab03      	add	r3, sp, #12
 8006060:	4805      	ldr	r0, [pc, #20]	; (8006078 <fiprintf+0x20>)
 8006062:	f853 2b04 	ldr.w	r2, [r3], #4
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	f7ff fcdd 	bl	8005a28 <_vfiprintf_r>
 800606e:	b002      	add	sp, #8
 8006070:	f85d eb04 	ldr.w	lr, [sp], #4
 8006074:	b003      	add	sp, #12
 8006076:	4770      	bx	lr
 8006078:	20000064 	.word	0x20000064

0800607c <__swhatbuf_r>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	460c      	mov	r4, r1
 8006080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006084:	2900      	cmp	r1, #0
 8006086:	b096      	sub	sp, #88	; 0x58
 8006088:	4615      	mov	r5, r2
 800608a:	461e      	mov	r6, r3
 800608c:	da0d      	bge.n	80060aa <__swhatbuf_r+0x2e>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	bf0c      	ite	eq
 800609a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800609e:	2340      	movne	r3, #64	; 0x40
 80060a0:	2000      	movs	r0, #0
 80060a2:	6031      	str	r1, [r6, #0]
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	b016      	add	sp, #88	; 0x58
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	466a      	mov	r2, sp
 80060ac:	f000 f848 	bl	8006140 <_fstat_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	dbec      	blt.n	800608e <__swhatbuf_r+0x12>
 80060b4:	9901      	ldr	r1, [sp, #4]
 80060b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80060ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060be:	4259      	negs	r1, r3
 80060c0:	4159      	adcs	r1, r3
 80060c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c6:	e7eb      	b.n	80060a0 <__swhatbuf_r+0x24>

080060c8 <__smakebuf_r>:
 80060c8:	898b      	ldrh	r3, [r1, #12]
 80060ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060cc:	079d      	lsls	r5, r3, #30
 80060ce:	4606      	mov	r6, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	d507      	bpl.n	80060e4 <__smakebuf_r+0x1c>
 80060d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	2301      	movs	r3, #1
 80060de:	6163      	str	r3, [r4, #20]
 80060e0:	b002      	add	sp, #8
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	ab01      	add	r3, sp, #4
 80060e6:	466a      	mov	r2, sp
 80060e8:	f7ff ffc8 	bl	800607c <__swhatbuf_r>
 80060ec:	9900      	ldr	r1, [sp, #0]
 80060ee:	4605      	mov	r5, r0
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fe ff0f 	bl	8004f14 <_malloc_r>
 80060f6:	b948      	cbnz	r0, 800610c <__smakebuf_r+0x44>
 80060f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060fc:	059a      	lsls	r2, r3, #22
 80060fe:	d4ef      	bmi.n	80060e0 <__smakebuf_r+0x18>
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	f043 0302 	orr.w	r3, r3, #2
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	e7e3      	b.n	80060d4 <__smakebuf_r+0xc>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	6020      	str	r0, [r4, #0]
 8006110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	6163      	str	r3, [r4, #20]
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	6120      	str	r0, [r4, #16]
 800611e:	b15b      	cbz	r3, 8006138 <__smakebuf_r+0x70>
 8006120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006124:	4630      	mov	r0, r6
 8006126:	f000 f81d 	bl	8006164 <_isatty_r>
 800612a:	b128      	cbz	r0, 8006138 <__smakebuf_r+0x70>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	431d      	orrs	r5, r3
 800613c:	81a5      	strh	r5, [r4, #12]
 800613e:	e7cf      	b.n	80060e0 <__smakebuf_r+0x18>

08006140 <_fstat_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d07      	ldr	r5, [pc, #28]	; (8006160 <_fstat_r+0x20>)
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	602b      	str	r3, [r5, #0]
 800614e:	f7fb f9c8 	bl	80014e2 <_fstat>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	d102      	bne.n	800615c <_fstat_r+0x1c>
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	b103      	cbz	r3, 800615c <_fstat_r+0x1c>
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	bd38      	pop	{r3, r4, r5, pc}
 800615e:	bf00      	nop
 8006160:	200003c0 	.word	0x200003c0

08006164 <_isatty_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d06      	ldr	r5, [pc, #24]	; (8006180 <_isatty_r+0x1c>)
 8006168:	2300      	movs	r3, #0
 800616a:	4604      	mov	r4, r0
 800616c:	4608      	mov	r0, r1
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	f7fb f9c7 	bl	8001502 <_isatty>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_isatty_r+0x1a>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_isatty_r+0x1a>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	200003c0 	.word	0x200003c0

08006184 <abort>:
 8006184:	b508      	push	{r3, lr}
 8006186:	2006      	movs	r0, #6
 8006188:	f000 f834 	bl	80061f4 <raise>
 800618c:	2001      	movs	r0, #1
 800618e:	f7fb f959 	bl	8001444 <_exit>

08006192 <_malloc_usable_size_r>:
 8006192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006196:	1f18      	subs	r0, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	bfbc      	itt	lt
 800619c:	580b      	ldrlt	r3, [r1, r0]
 800619e:	18c0      	addlt	r0, r0, r3
 80061a0:	4770      	bx	lr

080061a2 <_raise_r>:
 80061a2:	291f      	cmp	r1, #31
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4604      	mov	r4, r0
 80061a8:	460d      	mov	r5, r1
 80061aa:	d904      	bls.n	80061b6 <_raise_r+0x14>
 80061ac:	2316      	movs	r3, #22
 80061ae:	6003      	str	r3, [r0, #0]
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80061b8:	b112      	cbz	r2, 80061c0 <_raise_r+0x1e>
 80061ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061be:	b94b      	cbnz	r3, 80061d4 <_raise_r+0x32>
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 f831 	bl	8006228 <_getpid_r>
 80061c6:	462a      	mov	r2, r5
 80061c8:	4601      	mov	r1, r0
 80061ca:	4620      	mov	r0, r4
 80061cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d0:	f000 b818 	b.w	8006204 <_kill_r>
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d00a      	beq.n	80061ee <_raise_r+0x4c>
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	d103      	bne.n	80061e4 <_raise_r+0x42>
 80061dc:	2316      	movs	r3, #22
 80061de:	6003      	str	r3, [r0, #0]
 80061e0:	2001      	movs	r0, #1
 80061e2:	e7e7      	b.n	80061b4 <_raise_r+0x12>
 80061e4:	2400      	movs	r4, #0
 80061e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061ea:	4628      	mov	r0, r5
 80061ec:	4798      	blx	r3
 80061ee:	2000      	movs	r0, #0
 80061f0:	e7e0      	b.n	80061b4 <_raise_r+0x12>
	...

080061f4 <raise>:
 80061f4:	4b02      	ldr	r3, [pc, #8]	; (8006200 <raise+0xc>)
 80061f6:	4601      	mov	r1, r0
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f7ff bfd2 	b.w	80061a2 <_raise_r>
 80061fe:	bf00      	nop
 8006200:	20000064 	.word	0x20000064

08006204 <_kill_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	; (8006224 <_kill_r+0x20>)
 8006208:	2300      	movs	r3, #0
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f7fb f907 	bl	8001424 <_kill>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d102      	bne.n	8006220 <_kill_r+0x1c>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	b103      	cbz	r3, 8006220 <_kill_r+0x1c>
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	200003c0 	.word	0x200003c0

08006228 <_getpid_r>:
 8006228:	f7fb b8f4 	b.w	8001414 <_getpid>

0800622c <_init>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr

08006238 <_fini>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr
